WEBVTT

1
00:00:00.012 --> 00:00:07.611
[SOUND]
We have so

2
00:00:07.611 --> 00:00:12.620
far designed and analyzed an algorithm for
the set cover problem.

3
00:00:12.620 --> 00:00:15.370
Let's us know try to
design a better algorithm.

4
00:00:16.940 --> 00:00:20.670
What are the weaknesses of
the algorithm we have so far?

5
00:00:20.670 --> 00:00:22.150
Let's see.

6
00:00:22.150 --> 00:00:27.210
It's an iterated randomized rounding
algorithm, that gives as an output

7
00:00:27.210 --> 00:00:32.230
a collection of sets that is a set
cover with high probability, and

8
00:00:32.230 --> 00:00:37.360
has a cost that, on average,
is pretty good, ln(n) plus a constant OPT.

9
00:00:38.670 --> 00:00:41.950
However, neither of these
things are guaranteed.

10
00:00:41.950 --> 00:00:43.990
It's not guaranteed to be a set cover.

11
00:00:45.050 --> 00:00:49.900
And the cost is not guaranteed to be
at most login plus three times opt.

12
00:00:49.900 --> 00:00:55.390
So let's try to deal with
the first of these weaknesses.

13
00:00:55.390 --> 00:00:58.920
The algorithm we have so far,
Is not always guaranteed

14
00:00:58.920 --> 00:01:02.860
to give us as an output something
that is a proper set cover.

15
00:01:02.860 --> 00:01:04.830
It is not always correct.

16
00:01:04.830 --> 00:01:07.350
It's only correct with high probability.

17
00:01:07.350 --> 00:01:11.874
So, let's try to design an algorithm
that outputs something that

18
00:01:11.874 --> 00:01:13.418
always is a set cover.

19
00:01:15.903 --> 00:01:16.670
All right.

20
00:01:16.670 --> 00:01:20.460
So what are we going to do if we want
the output to always be a set cover?

21
00:01:21.480 --> 00:01:25.560
What we want is an algorithm
that gives us an output,

22
00:01:25.560 --> 00:01:30.770
a collection of sets that always
is a set cover guaranteed and

23
00:01:30.770 --> 00:01:35.680
with average cost at most O(ln(n)).

24
00:01:35.680 --> 00:01:41.600
Well, the answer is it's easy to
design a variant of the algorithm

25
00:01:41.600 --> 00:01:42.920
to try and get that.

26
00:01:42.920 --> 00:01:43.810
What is the variant?

27
00:01:45.880 --> 00:01:53.820
Instead of repeating our sampling a fixed
number of times, ln(n)+3, what do we do?

28
00:01:53.820 --> 00:01:58.090
If after this number of times,
we still don't have a set cover.

29
00:01:58.090 --> 00:02:02.210
Let's just continue and
let us stop once we have a set cover.

30
00:02:03.210 --> 00:02:08.630
So the obvious solution is to fix
the algorithm by replacing the condition,

31
00:02:08.630 --> 00:02:12.000
repeat a fixed number of times,
by the condition,

32
00:02:12.000 --> 00:02:15.220
repeat until the output is a set cover.

33
00:02:17.860 --> 00:02:21.640
So, this is the algorithm.

34
00:02:23.500 --> 00:02:28.270
Repeat, for every set we put S in
the cover with pr proportional

35
00:02:28.270 --> 00:02:31.210
to the value of the fractional
variable in the LP solution.

36
00:02:32.510 --> 00:02:36.430
If it's not yet in our correctional sets,

37
00:02:36.430 --> 00:02:40.490
until what we have in our
collection is a set cover.

38
00:02:42.400 --> 00:02:48.220
Equivalently we can write an algorithm
that is essentially the same,

39
00:02:48.220 --> 00:02:50.960
but a little bit cleaner to analyze.

40
00:02:50.960 --> 00:02:51.460
What is it?

41
00:02:52.650 --> 00:02:56.650
Here we have a sequence of
repetitions some number of times, and

42
00:02:56.650 --> 00:02:58.880
at each repetition, we have a for

43
00:02:58.880 --> 00:03:04.050
loop where in parallel we take
every set with priority x sub s.

44
00:03:05.150 --> 00:03:07.660
Instead, let's do it one by one.

45
00:03:09.410 --> 00:03:14.880
Let's repeat, choose one set,
one set but with the same probability,

46
00:03:14.880 --> 00:03:19.310
probability x sub s, or
rather, let's normalize it so

47
00:03:19.310 --> 00:03:24.710
that it is a proper distribution so
that the sum of every our set equals 1.

48
00:03:24.710 --> 00:03:30.710
So we choose set S with probability
proportional to x sub S,

49
00:03:30.710 --> 00:03:35.040
x sub S divided by the sum over
every set of x of S prime.

50
00:03:37.040 --> 00:03:40.660
Once we have chosen this set, we put it
in the cover, if it's not there yet, and

51
00:03:40.660 --> 00:03:42.420
we repeat until we have a set cover.

52
00:03:43.890 --> 00:03:49.420
So this, let us call this the sample and
integrate algorithm.

53
00:03:49.420 --> 00:03:54.220
Repeat pick a set at random
where set S is taken with

54
00:03:54.220 --> 00:03:59.340
probability proportion to x of S, the
fraction or variable given as an algorithm

55
00:03:59.340 --> 00:04:04.660
put of the linear program relaxation put
it in the cover if its not there yet.

56
00:04:04.660 --> 00:04:06.760
And repeat until you have a set cover.

57
00:04:08.080 --> 00:04:13.200
Now we have a nice algorithm
that always outputs a set cover.

58
00:04:13.200 --> 00:04:17.170
Let us see, analyze it to
analyze the cost of the output.

59
00:04:19.160 --> 00:04:22.320
This will be the objective
of our next section.