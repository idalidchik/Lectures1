WEBVTT

1
00:00:00.000 --> 00:00:04.087
[MUSIC]

2
00:00:07.315 --> 00:00:10.982
We now have a randomized rounding
procedure to take the solution of

3
00:00:10.982 --> 00:00:16.040
the linear programming relaxation and
turn into an ending well solution.

4
00:00:16.040 --> 00:00:21.990
Now, let us itemize the cost of
a solution and related to the LP optimum.

5
00:00:24.400 --> 00:00:29.510
How good is the output collection of sets?

6
00:00:29.510 --> 00:00:30.590
It all depends.

7
00:00:31.700 --> 00:00:37.170
First, we write the value of the output,
the cost of the output algebraically.

8
00:00:37.170 --> 00:00:41.570
The cost of the output is,
The sum over every S,

9
00:00:41.570 --> 00:00:44.740
set S in the output of the cost of S.

10
00:00:46.510 --> 00:00:48.880
This is a random quantity.

11
00:00:48.880 --> 00:00:54.330
Because whether S is in the output or
not, depends on the random choices.

12
00:00:55.650 --> 00:00:57.940
So sometimes it's large.

13
00:00:57.940 --> 00:00:59.370
Sometimes it's small.

14
00:00:59.370 --> 00:01:02.020
And so
the question now becomes as often for

15
00:01:02.020 --> 00:01:06.670
randomized algorithms,
how good is this quantity on average?

16
00:01:06.670 --> 00:01:08.050
How good is it typically?

17
00:01:09.790 --> 00:01:14.160
So for that we're going to rewrite
the quantity sum of c sub S for

18
00:01:14.160 --> 00:01:21.570
S in the Output as sum over
every set in the collection,

19
00:01:21.570 --> 00:01:29.390
in the universe of c sub S
times a quantity which is 1 if

20
00:01:29.390 --> 00:01:35.380
S is in the Output cover, and
zero if it is not in the Output.

21
00:01:35.380 --> 00:01:40.400
So this is the indicator
function that takes value 1 if

22
00:01:40.400 --> 00:01:45.070
S is in the Output and
0 if S is not in the Output.

23
00:01:45.070 --> 00:01:46.450
It's a notation.

24
00:01:46.450 --> 00:01:50.914
And we can rewrite the sum over
every S in the Output of c sub S,

25
00:01:50.914 --> 00:01:56.270
as the sum of every S in the output of
c sub S, times this indicator function.

26
00:01:57.590 --> 00:02:01.110
What is this equal to on average?

27
00:02:01.110 --> 00:02:02.510
What is its expected value?

28
00:02:04.570 --> 00:02:08.080
Here, we use the Linearity of expectation,

29
00:02:08.080 --> 00:02:11.280
a very handy tool in
the analysis of algorithms.

30
00:02:11.280 --> 00:02:15.280
When you have two random variables A and
B.

31
00:02:15.280 --> 00:02:19.260
The expected value of A + B is
the sum of the expected values.

32
00:02:20.840 --> 00:02:25.110
The expectation of the sum is
the sum of the expectations.

33
00:02:25.110 --> 00:02:29.550
Expectation and sum commute, you can
take them in whatever order you want.

34
00:02:30.840 --> 00:02:35.760
Here, we want an expectation, other sum.

35
00:02:35.760 --> 00:02:42.690
As soon as we see this, automatically,
we have a desire to exchange summations.

36
00:02:42.690 --> 00:02:46.720
We put the sum on the outside and
the expectation on the inside.

37
00:02:46.720 --> 00:02:47.980
You're allowed to do this.

38
00:02:47.980 --> 00:02:49.690
This is a valid transformation.

39
00:02:50.920 --> 00:02:55.280
So, the expected cost of
the output is the sum of every set

40
00:02:55.280 --> 00:02:59.220
of the expected value of
the indicator function times c sub S.

41
00:03:00.720 --> 00:03:02.760
Let's focus on this expected value.

42
00:03:04.610 --> 00:03:07.450
Next property of expectation.

43
00:03:07.450 --> 00:03:10.470
For any constant lambda,
any random variable X,

44
00:03:10.470 --> 00:03:15.700
the expected value of lambda X =
lambda times the expected value of X.

45
00:03:15.700 --> 00:03:19.290
Multiplication by a constant and
expectation commute.

46
00:03:21.200 --> 00:03:26.628
Here, we have the expected value of
an indicator function, times c sub S.

47
00:03:26.628 --> 00:03:30.990
C sub S is a constant, and so,
we can take it out of the expectation.

48
00:03:32.710 --> 00:03:33.800
So we do this.

49
00:03:33.800 --> 00:03:36.620
We are naturally drawn to doing this.

50
00:03:36.620 --> 00:03:40.580
So that now we have to take some
expectation of something simple.

51
00:03:40.580 --> 00:03:46.050
Expectation, for one particular
said s of the indicator function

52
00:03:46.050 --> 00:03:50.470
that is 1 if s is in the output and
zero of s is not in the output.

53
00:03:53.050 --> 00:03:58.080
It is now easy to verify that
the expectation of the indicator function

54
00:03:58.080 --> 00:04:02.770
of an event is exactly equal to
the probability of that event occurring.

55
00:04:02.770 --> 00:04:06.200
In fact that is a well known fact
of elementary probability theory.

56
00:04:07.220 --> 00:04:12.511
So we now have to compute the probability
for a particular set S that

57
00:04:12.511 --> 00:04:18.960
it is in the output collection of sets and
that probability is exactly x sub S.

58
00:04:18.960 --> 00:04:24.165
We put S in the output with
probability 80% if x sub S is 0.8,

59
00:04:24.165 --> 00:04:29.770
70% if it's 0.7, in general with
probability exactly x sub S.

60
00:04:30.850 --> 00:04:36.550
So, now we can combine that line of
reasoning and what do we deduce?

61
00:04:36.550 --> 00:04:39.840
We deduce that the expected
value of the output,

62
00:04:39.840 --> 00:04:43.416
the expected cost of the collection
of sets that will give us an output.

63
00:04:43.416 --> 00:04:47.960
Is equal, equal to what?

64
00:04:47.960 --> 00:04:51.680
Sum over every set of x sub S, c sub S.

65
00:04:53.200 --> 00:04:54.440
Now what?

66
00:04:54.440 --> 00:04:55.280
Look at this.

67
00:04:55.280 --> 00:04:56.940
You recognize this.

68
00:04:56.940 --> 00:04:59.730
This quantity is exactly.

69
00:04:59.730 --> 00:05:04.290
It's exactly the objective function
of the linear programming relaxation.

70
00:05:04.290 --> 00:05:07.060
It's exactly the value
of the linear program.

71
00:05:07.060 --> 00:05:08.250
And what do we know?

72
00:05:08.250 --> 00:05:11.570
Because it's a relaxation,
we know that this is at most opt.

73
00:05:12.590 --> 00:05:17.130
And so, the Output is a collection
of sets, whose cost and

74
00:05:17.130 --> 00:05:22.430
expectation is at most opt,
the unknown optimal value.

75
00:05:22.430 --> 00:05:25.690
This was the reason why we
chose this particular rounding

76
00:05:25.690 --> 00:05:30.390
while we decided to round to one,
with priority x of S exactly.

77
00:05:30.390 --> 00:05:33.230
Just so us to get that objective.

78
00:05:34.920 --> 00:05:40.090
And so, now we know that our running
procedure produces a collection of sets

79
00:05:40.090 --> 00:05:42.500
whose expected cost is at most opt.

80
00:05:42.500 --> 00:05:46.379
It remains to see the amount of coverage
you obtain with that collection.