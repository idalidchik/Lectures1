WEBVTT

1
00:00:00.970 --> 00:00:06.630
[MUSIC]

2
00:00:06.630 --> 00:00:09.993
We now have a very nice algorithm for
the set cover problem,

3
00:00:09.993 --> 00:00:12.290
the sample-and-iterate algorithm.

4
00:00:12.290 --> 00:00:14.250
Let us now turn to its analysis.

5
00:00:16.680 --> 00:00:20.820
As a reminder, the algorithm
repeatedly picks a set at random

6
00:00:20.820 --> 00:00:24.320
with probability proportional to x sub s,
put it in the cover,

7
00:00:24.320 --> 00:00:28.480
and stops once the set's
chosen from a set cover.

8
00:00:29.710 --> 00:00:31.280
How do we analyze this?

9
00:00:31.280 --> 00:00:35.180
This is perhaps the trickiest
analysis in this chapter and

10
00:00:35.180 --> 00:00:37.360
maybe in the entire course.

11
00:00:37.360 --> 00:00:40.600
So we have to go slowly and pay attention.

12
00:00:42.750 --> 00:00:44.230
First, sum notations.

13
00:00:46.040 --> 00:00:47.650
How do we express the cost of the output?

14
00:00:49.130 --> 00:00:53.460
The cost of the output is
the sum over every step

15
00:00:53.460 --> 00:00:56.290
of the cost of the set
chosen at iteration t.

16
00:00:57.760 --> 00:00:59.350
What is the range of t?

17
00:00:59.350 --> 00:01:03.050
T goes all the way to capital T,
the total number of iterations,

18
00:01:03.050 --> 00:01:05.870
which is something random,
the stopping time of our process.

19
00:01:07.000 --> 00:01:12.260
So the cost of the output is the sum over
all t, from 1 to capital T, of C sub t.

20
00:01:13.420 --> 00:01:14.980
This is what we want to analyze.

21
00:01:17.780 --> 00:01:19.360
How do we analyze it?

22
00:01:19.360 --> 00:01:20.900
It's a random quantity.

23
00:01:20.900 --> 00:01:23.320
We're going to analyze its expected value.

24
00:01:23.320 --> 00:01:28.250
Expected value of a sum from t going
from 1 to capital T of C sub t.

25
00:01:29.560 --> 00:01:31.390
What did I tell you in my last discussion?

26
00:01:32.540 --> 00:01:39.580
When we have the expectation of the sum,
we invert summations and expectation.

27
00:01:39.580 --> 00:01:43.280
So we'd like to write that this
is the sum of the expectations.

28
00:01:43.280 --> 00:01:47.156
Except there's a problem here.

29
00:01:47.156 --> 00:01:51.410
T itself is random.

30
00:01:51.410 --> 00:01:57.940
So we'd like to write that this is
capital T times the expected value of Ct.

31
00:01:57.940 --> 00:02:01.830
Or we'd like to write that this is
the sum of all t from 1 to capital T

32
00:02:01.830 --> 00:02:04.220
of the expected value of C sub t.

33
00:02:04.220 --> 00:02:07.010
But what do we do with capital T?

34
00:02:07.010 --> 00:02:12.110
Capital T is random so we cannot
exchange expectation and summation here.

35
00:02:12.110 --> 00:02:14.062
So we have a problem here.

36
00:02:14.062 --> 00:02:16.600
We cannot apply the recipe
I gave last time.

37
00:02:17.910 --> 00:02:19.490
So what do we do now?

38
00:02:19.490 --> 00:02:22.670
We turn to probablists and
ask them for a trick.

39
00:02:24.680 --> 00:02:25.384
And here it is.

40
00:02:25.384 --> 00:02:33.100
If we have a stopping time, if we have
some random variables bounded from above.

41
00:02:34.790 --> 00:02:39.430
If the expected value of X sub t is
less than u, and the stopping time and

42
00:02:39.430 --> 00:02:46.340
expectation is less than infinity,
then the expected value

43
00:02:46.340 --> 00:02:53.480
of the sum of X sub t is less than mu
times the expectation of capital T.

44
00:02:55.510 --> 00:03:00.620
This is one way in which we sort of
invert expectation and summation.

45
00:03:01.900 --> 00:03:06.100
So as soon as we have an upper bound for
X sub t,

46
00:03:06.100 --> 00:03:12.530
then we can use it and invert summations
and we can continue our analysis.

47
00:03:12.530 --> 00:03:18.229
So the next step will be let's try to
analyze the expected value of X sub t and

48
00:03:18.229 --> 00:03:19.870
bounded from above.

49
00:03:21.010 --> 00:03:22.860
What is X sub t in our case?

50
00:03:24.710 --> 00:03:28.920
X sub t is the cost of
a set chosen at time t.

51
00:03:28.920 --> 00:03:33.310
So we want to upper bound
the expected value of C sub t,

52
00:03:33.310 --> 00:03:35.390
the expected cost of
a set chosen at time t.

53
00:03:36.840 --> 00:03:37.340
What is it?

54
00:03:38.370 --> 00:03:41.920
It's equal to the sum over every
set of the indicated function

55
00:03:41.920 --> 00:03:44.190
of whether that set is chosen at time t.

56
00:03:44.190 --> 00:03:45.930
And you think expectations.

57
00:03:45.930 --> 00:03:46.920
And then what do you do?

58
00:03:46.920 --> 00:03:48.640
You invert expectation and summation.

59
00:03:48.640 --> 00:03:49.690
And then what do you do?

60
00:03:49.690 --> 00:03:51.650
You have an expectation
of an indicator function.

61
00:03:51.650 --> 00:03:53.890
And what do you do if
this is a probability?

62
00:03:53.890 --> 00:03:55.830
We have done this before, I'll skip this.

63
00:03:55.830 --> 00:04:00.737
And sum of every set of
the probability that this set is

64
00:04:00.737 --> 00:04:05.330
chosen during a duration t
times the cost of a set.

65
00:04:07.790 --> 00:04:10.380
What is the probability that S is chosen?

66
00:04:10.380 --> 00:04:17.500
We said X sub s divided by
the sum of all Xs for all sets.

67
00:04:17.500 --> 00:04:22.970
So we've replaced the probability by this
by its value, and we get this expression

68
00:04:22.970 --> 00:04:27.550
in the numerator,
sum of every s of x sub s cs.

69
00:04:27.550 --> 00:04:31.300
Denominator, sum of every s of x sub s.

70
00:04:31.300 --> 00:04:34.250
This is independent of little t.

71
00:04:34.250 --> 00:04:35.310
Let's call this mu.

72
00:04:37.180 --> 00:04:40.710
Now we can apply Wald's equation,
and what do we get?

73
00:04:40.710 --> 00:04:44.220
The expected cost of
the output is the expected

74
00:04:44.220 --> 00:04:49.020
number of iterations times mu
where mu is this quantity.

75
00:04:49.020 --> 00:04:51.476
So to analyze the cost of the output,

76
00:04:51.476 --> 00:04:56.960
now we need to look at the expected value
of T, the expected number of iterations.

77
00:04:56.960 --> 00:05:01.900
Once we have that, we will know the value
of the expected cost of the output.

78
00:05:01.900 --> 00:05:05.450
So what is the expected
number of iterations?

79
00:05:07.800 --> 00:05:09.410
For that, we'll need more notations.

80
00:05:11.370 --> 00:05:13.530
How do we determine
the number of iterations?

81
00:05:13.530 --> 00:05:19.150
It depends on whether the sets
we have chosen from a set cover.

82
00:05:20.380 --> 00:05:21.360
How do we know that?

83
00:05:21.360 --> 00:05:24.290
We have to look at the elements
that are not yet covered.

84
00:05:24.290 --> 00:05:29.153
Let us define n sub T as the number
of elements that are not yet

85
00:05:29.153 --> 00:05:31.590
covered after t iterations.

86
00:05:33.200 --> 00:05:35.020
What do we know about n sub T?

87
00:05:35.020 --> 00:05:37.240
Initially, no element is covered.

88
00:05:37.240 --> 00:05:37.760
n0 is n.

89
00:05:39.050 --> 00:05:42.590
In the end, every element is covered,
n capital T is zero.

90
00:05:43.780 --> 00:05:47.260
Right before the end,
we are not quite done yet.

91
00:05:47.260 --> 00:05:50.360
At least one element is not yet covered.

92
00:05:50.360 --> 00:05:53.830
So nT-1 is at least 1.

93
00:05:53.830 --> 00:05:56.960
How will this be useful
to analyze capital T?

94
00:05:58.930 --> 00:06:05.100
The answer is Wald's equation for
dependent decrements.

95
00:06:05.100 --> 00:06:05.820
What is this?

96
00:06:06.930 --> 00:06:09.370
Consider a random decreasing sequence.

97
00:06:09.370 --> 00:06:12.690
We will apply it for our n sub Ts.

98
00:06:12.690 --> 00:06:16.380
And the stopping time, T,
whose expectation is finite.

99
00:06:17.700 --> 00:06:23.460
Assume that a certain property
is satisfied on the n sub ts,

100
00:06:23.460 --> 00:06:26.350
how they change at each
step in expectation.

101
00:06:28.010 --> 00:06:30.320
Then we have an upper bound for

102
00:06:30.320 --> 00:06:33.330
the expected value of t of
the total number of durations.

103
00:06:34.620 --> 00:06:41.810
So in order to bound e sub t, e of t, we
want this expression as our upper bound.

104
00:06:41.810 --> 00:06:47.200
And for that, we need to analyze
the change in n sub t over one step.

105
00:06:48.980 --> 00:06:55.950
The number of elements not yet
covered at time t versus a time t plus 1.

106
00:06:55.950 --> 00:06:58.220
Consider this.

107
00:06:58.220 --> 00:06:59.615
What does this represent?

108
00:06:59.615 --> 00:07:01.495
You condition on n sub t.

109
00:07:01.495 --> 00:07:05.055
You assume you know how many
elements are not yet covered.

110
00:07:05.055 --> 00:07:10.126
n sub t- n sub t + 1 is exactly
the number of elements that

111
00:07:10.126 --> 00:07:15.535
will be covered in the next iteration,
in iteration t + 1.

112
00:07:15.535 --> 00:07:17.519
And we want the expectation, so

113
00:07:17.519 --> 00:07:21.495
let's fix an element E among the n
sub t that are not yet covered.

114
00:07:21.495 --> 00:07:26.815
And let's look at the probability that
E is covered in the next iteration.

115
00:07:26.815 --> 00:07:32.230
The probability that it's covered
is the probability that the set S

116
00:07:32.230 --> 00:07:37.940
that is chosen by the algorithm at
iteration t + 1 contains element E.

117
00:07:39.340 --> 00:07:40.570
What is that?

118
00:07:40.570 --> 00:07:47.100
It's the sum of every set containing E
of the probability that S is chosen.

119
00:07:47.100 --> 00:07:48.970
X sub s, normalized.

120
00:07:50.350 --> 00:07:52.170
And what do we know about this?

121
00:07:52.170 --> 00:07:56.870
Well, because of the LP
relaxation constraint,

122
00:07:56.870 --> 00:07:59.800
we know that this is at least 1.

123
00:07:59.800 --> 00:08:00.940
And therefore,

124
00:08:00.940 --> 00:08:06.090
we know that this quantity is at least
1 over the sum of all the x sub s's.

125
00:08:07.390 --> 00:08:13.350
Sum over every element, and
this gives us our desired

126
00:08:13.350 --> 00:08:17.550
lower bound on the expected value
of nt minus nt plus 1 given nt.

127
00:08:18.700 --> 00:08:20.050
What is this lower bound?

128
00:08:20.050 --> 00:08:27.770
It's the sum, this expected value
is at least n sub t over the sum.

129
00:08:30.290 --> 00:08:31.240
All right.

130
00:08:31.240 --> 00:08:38.210
The expected value of the change given n
sub t is at least n sub t over this sum.

131
00:08:40.600 --> 00:08:43.320
This is our function f of n sub t.

132
00:08:44.820 --> 00:08:49.110
And so now, we can apply Wald's
equation for dependent decrements.

133
00:08:49.110 --> 00:08:49.800
And what do we get?

134
00:08:50.810 --> 00:08:58.830
The expected value of capital T is at
most 1 plus expected value of integral.

135
00:09:00.070 --> 00:09:01.520
Integral of what?

136
00:09:01.520 --> 00:09:02.020
Let's see.

137
00:09:03.450 --> 00:09:05.390
N sub t- 1 is at least 1.

138
00:09:07.370 --> 00:09:08.980
N sub 0 is n.

139
00:09:10.180 --> 00:09:11.815
And what is f of z?

140
00:09:11.815 --> 00:09:17.130
1 over f of z is the sum
of all the x sub s's

141
00:09:17.130 --> 00:09:21.650
over n sub t for z over z.

142
00:09:21.650 --> 00:09:22.230
So here we go.

143
00:09:23.240 --> 00:09:26.907
And this integral,
we can take the sum out, and

144
00:09:26.907 --> 00:09:30.860
we know that this integral
is exactly a logarithm.

145
00:09:30.860 --> 00:09:34.535
So we get this upper bound
on the expected value of T,

146
00:09:34.535 --> 00:09:37.720
1 plus the sum of the x
sub s times the log of n.

147
00:09:40.700 --> 00:09:42.460
Put everything together.

148
00:09:42.460 --> 00:09:49.098
The expected cost of the output is at
most the expected value of capital T,

149
00:09:49.098 --> 00:09:55.626
1 plus the sum of the x's by the log of
n times the expected cost of c sub t,

150
00:09:55.626 --> 00:10:01.350
which is this quantity here,
sum of csxs over the sum of the xs.

151
00:10:01.350 --> 00:10:02.450
What is this?

152
00:10:02.450 --> 00:10:06.170
Since the numerator is
the objective of the LP,

153
00:10:06.170 --> 00:10:10.030
this is at most 1 + log n times OPT.

154
00:10:10.030 --> 00:10:11.025
So what have we proved?

155
00:10:11.025 --> 00:10:15.980
We've proved that the algorithm,
the sample-and-iterate algorithm gives

156
00:10:15.980 --> 00:10:20.190
as an output a collection of
sets that is a set cover and

157
00:10:20.190 --> 00:10:26.556
the average cost of the output
is at most 1 + log n times OPT.

158
00:10:26.556 --> 00:10:28.270
Very good.

159
00:10:28.270 --> 00:10:29.380
So we're almost done.

160
00:10:29.380 --> 00:10:30.390
We've set cover.

161
00:10:30.390 --> 00:10:31.380
What remains to be done?

162
00:10:32.480 --> 00:10:35.410
I will discuss further
improvements In particular,

163
00:10:35.410 --> 00:10:38.910
how to remove the word
average from the theorem.

164
00:10:38.910 --> 00:10:43.870
Then I will discuss possible or
impossible improvements, and finally

165
00:10:43.870 --> 00:10:48.360
give you a little bit of background about
the people who have worked on this.