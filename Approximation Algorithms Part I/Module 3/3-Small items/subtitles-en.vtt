WEBVTT

1
00:00:00.285 --> 00:00:04.325
[MUSIC]

2
00:00:04.325 --> 00:00:07.742
So far we have studied
the bin packing problem and

3
00:00:07.742 --> 00:00:12.742
tried to design a linear programming
relaxation with the ultimate goal

4
00:00:12.742 --> 00:00:17.340
of finding an asymptotic
approximation scheme for the problem.

5
00:00:18.420 --> 00:00:23.030
Here we will go back a little bit and
try to solve some special cases.

6
00:00:24.470 --> 00:00:25.920
Why do we do that?

7
00:00:25.920 --> 00:00:29.720
Remember that that a linear program
of relaxation is our first,

8
00:00:29.720 --> 00:00:33.340
our favorite tool to design
approximation algorithms.

9
00:00:33.340 --> 00:00:37.410
But the attempt we did failed.

10
00:00:37.410 --> 00:00:41.700
We failed to have a good linear
programming relaxation for

11
00:00:41.700 --> 00:00:47.010
linear backing, and so
we will try our next meta-tool,

12
00:00:47.010 --> 00:00:51.080
our next technique,
to design an approximation algorithm.

13
00:00:51.080 --> 00:00:52.980
When you are stuck, what do you do?

14
00:00:52.980 --> 00:00:55.240
You reduce the problem further.

15
00:00:55.240 --> 00:00:59.320
You try to solve some
interesting special cases.

16
00:00:59.320 --> 00:01:01.098
That helps you develop intuition.

17
00:01:03.932 --> 00:01:09.740
For now, we will look at the special case,
when all of the items are small.

18
00:01:09.740 --> 00:01:12.280
Small compared to the bin capacity.

19
00:01:13.550 --> 00:01:15.450
Let's be more specific.

20
00:01:15.450 --> 00:01:18.700
How can you solve bin
packing more efficiently?

21
00:01:18.700 --> 00:01:27.210
When every item has size less
than 1/3 of the bin capacity,

22
00:01:27.210 --> 00:01:33.030
1/3 of the bin capacity.

23
00:01:33.030 --> 00:01:34.806
Let's do an example.

24
00:01:34.806 --> 00:01:37.900
.2,.3,.25,.33,.24,.29,.33,.2, and so on.

25
00:01:39.270 --> 00:01:43.090
How does Next Fit perform in this case?

26
00:01:43.090 --> 00:01:43.840
What does it do?

27
00:01:44.840 --> 00:01:52.330
We can execute it on the sequence and
we can see that so far it uses three bins.

28
00:01:52.330 --> 00:01:57.704
The first bin is filled to .75 level.

29
00:01:57.704 --> 00:02:00.892
.2 plus .3 plus .25.

30
00:02:00.892 --> 00:02:03.610
The next bin contains a total of .86.

31
00:02:03.610 --> 00:02:09.110
The third bin contains a total of .53,

32
00:02:09.110 --> 00:02:14.470
and right now even before we
have seen the following item.

33
00:02:14.470 --> 00:02:18.320
We could already predict that
it's going to fit into bin three.

34
00:02:19.500 --> 00:02:20.410
Why?

35
00:02:20.410 --> 00:02:24.510
Because it's size is at most one-third.

36
00:02:24.510 --> 00:02:28.900
Point five three plus something
to a third is less than one.

37
00:02:28.900 --> 00:02:31.610
So the next item will fit in the bin.

38
00:02:31.610 --> 00:02:34.010
We will be able to add
it to bin number three.

39
00:02:35.610 --> 00:02:38.771
Something is going here
that did not happen before.

40
00:02:41.285 --> 00:02:48.647
So, what we can see is that if a bin is
filled up to level less than two thirds,

41
00:02:48.647 --> 00:02:53.840
then we are guaranteed to be
able to fit the next item.

42
00:02:55.410 --> 00:03:01.520
If a bin is filled to less than two
thirds Then we will never close it.

43
00:03:02.950 --> 00:03:11.250
In other words, we only close a bin once
it is filled to level at least two-thirds.

44
00:03:11.250 --> 00:03:16.580
Since Next Fit closes every bin
except the last one, all the bins

45
00:03:16.580 --> 00:03:22.300
except the last one Possibly,
are filled to at least two thirds.

46
00:03:22.300 --> 00:03:27.790
All the bins are filled to at least
two-thirds, except possibly the last one.

47
00:03:31.680 --> 00:03:33.820
What can we say from this?

48
00:03:33.820 --> 00:03:35.440
This is good news!

49
00:03:35.440 --> 00:03:42.860
If a bin is filled to two-thirds, then
It's already two thirds of 100% capacity.

50
00:03:43.980 --> 00:03:51.010
In other words, the total size of the
items that are placed in the Next Fit bins

51
00:03:51.010 --> 00:03:56.250
is at least two thirds times the number
of bins except for the last bin.

52
00:03:57.370 --> 00:03:58.510
Much better than before.

53
00:04:00.240 --> 00:04:05.730
We this way related the number of bins
used by Next Fit to the total item size.

54
00:04:07.080 --> 00:04:12.110
We know that up is at least the total
item size, so we can combine.

55
00:04:12.110 --> 00:04:14.770
And what do we deduce from this?

56
00:04:14.770 --> 00:04:19.423
The number of bins used by
Next Fit is at most one plus.

57
00:04:19.423 --> 00:04:21.758
3/2 x OPT.

58
00:04:21.758 --> 00:04:25.030
1+ 3/2 x OPT.

59
00:04:25.030 --> 00:04:27.260
This is much better than before.

60
00:04:27.260 --> 00:04:28.975
Before we had 2 x OPT.

61
00:04:28.975 --> 00:04:33.750
Now it's 1.5 x OPT.

62
00:04:33.750 --> 00:04:36.350
To prove this we took advantage

63
00:04:36.350 --> 00:04:41.003
of the fact that the items were
smaller than 1/3 x the bin capacity.

64
00:04:42.960 --> 00:04:45.350
So we have just proved a theorem.

65
00:04:45.350 --> 00:04:50.700
When all the items are smaller than
the one-third of the bin capacity,

66
00:04:50.700 --> 00:04:55.870
the next fit algorithm you use
a number of bins that is at most 1

67
00:04:55.870 --> 00:05:01.100
plus 1.5 times OPT.

68
00:05:01.100 --> 00:05:03.390
So, what is the message
from this analysis?

69
00:05:04.460 --> 00:05:10.250
From an example with small items
to a structural observation,

70
00:05:10.250 --> 00:05:15.680
every bin is filled to
level two-thirds at least.

71
00:05:15.680 --> 00:05:20.200
From that observation, you can deduce
an upper bound on the algorithm

72
00:05:20.200 --> 00:05:21.979
in terms of the total item sizes.

73
00:05:23.340 --> 00:05:26.960
With a different argument we
also have a lower bound on OPT

74
00:05:26.960 --> 00:05:29.200
in terms of the total item sizes.

75
00:05:30.220 --> 00:05:34.760
Combining yields a bounds
on bounds with small sizes.

76
00:05:35.880 --> 00:05:37.830
This can be extended.

77
00:05:37.830 --> 00:05:42.730
What if the items are less than one
quarter times the bin capacity?

78
00:05:42.730 --> 00:05:44.410
What about one fifth?

79
00:05:44.410 --> 00:05:45.340
What about one tenth?

80
00:05:46.370 --> 00:05:49.520
What if the items are less than
epsilon times the bin capacity?

81
00:05:50.700 --> 00:05:55.080
Then, next it is almost optimal,
next to the last bin.

82
00:05:56.260 --> 00:05:58.050
This is a good exercise.

83
00:05:59.610 --> 00:06:05.310
And so, we have seen that in some
special cases,when the items are small.

84
00:06:05.310 --> 00:06:11.390
It is possible to get a good,
a better analysis of bin packing.

85
00:06:11.390 --> 00:06:15.690
Next, what we will do is look
at some other special case,

86
00:06:15.690 --> 00:06:19.890
the opposite case, so to speak,
when the items are large.

87
00:06:19.890 --> 00:06:23.550
And after that,
once we have derived intuition for

88
00:06:23.550 --> 00:06:26.850
the two special cases Everything small,
everything large.

89
00:06:26.850 --> 00:06:30.162
We will be able to
combine the intuition and

90
00:06:30.162 --> 00:06:35.500
finally analyze an algorithm that
is good for every possible input.