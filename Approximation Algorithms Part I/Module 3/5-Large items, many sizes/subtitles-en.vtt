WEBVTT

1
00:00:03.261 --> 00:00:08.392
[MUSIC]

2
00:00:08.392 --> 00:00:11.969
After solving the bin packing
problem when items are large and

3
00:00:11.969 --> 00:00:13.773
there are few distinct sizes.

4
00:00:13.773 --> 00:00:17.598
Let us now move on to the less
special special case when

5
00:00:17.598 --> 00:00:21.771
items are still large but
there are many different sizes.

6
00:00:21.771 --> 00:00:26.410
Large items, many different item sizes.

7
00:00:26.410 --> 00:00:30.700
This is perhaps the most important
section in this entire chapter.

8
00:00:33.060 --> 00:00:33.770
What is the idea?

9
00:00:35.300 --> 00:00:38.920
The idea, as in Knapsack,
is to use rounding.

10
00:00:38.920 --> 00:00:42.750
We have many different item sizes,
we want few different item sizes.

11
00:00:42.750 --> 00:00:44.167
We will round the sizes.

12
00:00:44.167 --> 00:00:48.096
After we have rounded item sizes,
we have reduced the problem to

13
00:00:48.096 --> 00:00:52.640
the special special case that
we already know how to solve.

14
00:00:52.640 --> 00:00:54.150
How do we round sizes?

15
00:00:54.150 --> 00:00:55.490
We round them up.

16
00:00:56.670 --> 00:01:01.190
This way,
if the rounded items fit in a bin,

17
00:01:01.190 --> 00:01:06.860
then the unrounded items also fit in the
bin, they also respect the bin capacity.

18
00:01:08.870 --> 00:01:10.600
How are we going to round?

19
00:01:10.600 --> 00:01:14.132
For example,
let's say that the bin capacity is 100.

20
00:01:14.132 --> 00:01:19.760
The minimum item size, 10%, so let's say
the minimum item size is at least 10.

21
00:01:19.760 --> 00:01:20.950
What will we do?

22
00:01:20.950 --> 00:01:24.428
It is natural to say, let's round
the items up to the nearest integer.

23
00:01:24.428 --> 00:01:28.375
And then,
we only have 90 possible item sizes and so

24
00:01:28.375 --> 00:01:32.331
we can solve the rounded
problem in probably no time.

25
00:01:32.331 --> 00:01:37.630
And the solution will be a feasible
solution for the original problem.

26
00:01:37.630 --> 00:01:43.460
So that is the most natural attempt to
solve bin packing with large item sizes.

27
00:01:43.460 --> 00:01:47.647
It is inspired from the Knapsack algorithm
that we saw in the previous chapter.

28
00:01:49.782 --> 00:01:51.540
But how good is it?

29
00:01:52.540 --> 00:01:53.940
How good is this?

30
00:01:53.940 --> 00:01:58.802
We can picture it as,
we have a bin of capacity 100,

31
00:01:58.802 --> 00:02:02.740
all item sizes are between 10 and 100.

32
00:02:02.740 --> 00:02:08.890
We slice the item sizes
using integer points,

33
00:02:08.890 --> 00:02:14.780
and then for each size,
we round it up to the next integer.

34
00:02:15.850 --> 00:02:19.840
This is the actual size,
some fractional number,

35
00:02:19.840 --> 00:02:23.000
that's the rounded size, almost the same.

36
00:02:23.000 --> 00:02:25.390
The item size is only
increased by a little bit.

37
00:02:26.980 --> 00:02:28.540
The size increases by a little bit.

38
00:02:30.270 --> 00:02:33.360
So, how much does OPT
change when you do this?

39
00:02:33.360 --> 00:02:37.925
In Knapsack, we argued that when we
changed the values by a little bit it

40
00:02:37.925 --> 00:02:41.436
didn't have much of a consequence,
unfortunately.

41
00:02:44.718 --> 00:02:45.716
Look at this.

42
00:02:48.623 --> 00:02:51.317
Let's say we have capacity 100.

43
00:02:51.317 --> 00:02:57.551
Imagine we have 50 items
of size 1/3 of 100.

44
00:02:57.551 --> 00:03:01.592
And 50 items of size, say, 2/3 of 100.

45
00:03:01.592 --> 00:03:05.190
What is the optimal solution for
this input?

46
00:03:06.790 --> 00:03:12.195
The optimal solution is, obviously,
to pair up the items of size

47
00:03:12.195 --> 00:03:17.280
100*1/3 with the items of size 100*2/3.

48
00:03:17.280 --> 00:03:21.050
If you put two of these items together,
it fills a bin exactly.

49
00:03:21.050 --> 00:03:27.160
And so with 50 bins, 50 items plus
50 items fit in 50 bins, that's OPT.

50
00:03:27.160 --> 00:03:29.520
And now, let's look at the rounded input.

51
00:03:29.520 --> 00:03:35.719
Rounded input, the items of size
33.333333 are rounded up to 34.

52
00:03:35.719 --> 00:03:43.594
The items of size 66.6666666
are rounded up to size 67.

53
00:03:45.230 --> 00:03:45.730
Oops.

54
00:03:47.770 --> 00:03:50.581
They no longer fit,
we can no longer put two of them together.

55
00:03:50.581 --> 00:03:59.320
All the 67s, have to be alone in
the bin because 67 plus 34 is 101.

56
00:03:59.320 --> 00:04:04.840
And then,
the items of size 34 go two to a bin.

57
00:04:04.840 --> 00:04:06.200
So what does this mean?

58
00:04:06.200 --> 00:04:08.597
It means that for the rounded input,

59
00:04:08.597 --> 00:04:12.784
the OPT value of the rounded
input will be 50 plus 25, 75.

60
00:04:12.784 --> 00:04:18.070
This is really bad, really bad.

61
00:04:18.070 --> 00:04:20.630
We want something that is
very close to optimal.

62
00:04:20.630 --> 00:04:23.010
We want the rounding to
have a very small effect.

63
00:04:23.010 --> 00:04:28.530
And here, when we rounded, indeed, the
item values only changed by a little bit.

64
00:04:28.530 --> 00:04:31.050
But OPT changed by a large amount.

65
00:04:32.600 --> 00:04:34.180
This is very bad rounding.

66
00:04:36.490 --> 00:04:38.180
So this rounding fails.

67
00:04:40.160 --> 00:04:40.660
Now what?

68
00:04:42.460 --> 00:04:48.010
We need to find another kind of
rounding and this is adaptive rounding.

69
00:04:49.420 --> 00:04:50.673
Where does it come from?

70
00:04:50.673 --> 00:04:55.420
It's a new idea, a new idea.

71
00:04:55.420 --> 00:05:00.634
A new idea happens and here it is.

72
00:05:03.895 --> 00:05:08.481
This is perhaps the most important
slide in this entire week,

73
00:05:08.481 --> 00:05:10.340
in this entire chapter.

74
00:05:12.370 --> 00:05:15.990
Okay, start from the input, the input.

75
00:05:15.990 --> 00:05:19.896
That's the top line.
Item sizes, at most B, the bin capacity,

76
00:05:19.896 --> 00:05:21.432
at least B/10.

77
00:05:21.432 --> 00:05:25.990
Here are my items here on that scale.

78
00:05:27.080 --> 00:05:27.620
What do we do?

79
00:05:29.100 --> 00:05:32.750
We will make a few groups
of equal cardinality.

80
00:05:34.570 --> 00:05:41.169
Group one, after solving the items,
the smallest items.

81
00:05:41.169 --> 00:05:43.047
Another group with the next
few smallest items.

82
00:05:43.047 --> 00:05:43.988
Another group with the next
few smallest items.

83
00:05:43.988 --> 00:05:45.820
Here I have three groups.

84
00:05:47.240 --> 00:05:52.380
Then, I round all the items in
the same group to the same value.

85
00:05:52.380 --> 00:05:58.458
Namely, I round them up and up and
up to the maximum size in this group.

86
00:05:58.458 --> 00:06:03.286
These four items,
their size is rounded up to the size

87
00:06:03.286 --> 00:06:06.780
of the maximum, max size in group.

88
00:06:06.780 --> 00:06:07.377
Same thing for the next group.

89
00:06:07.377 --> 00:06:11.614
These four items we round their
size up to what, to this.

90
00:06:11.614 --> 00:06:17.460
And the next group, these four items,
their sizes up to this.

91
00:06:17.460 --> 00:06:23.200
And what if it doesn't quite fit,
we don't care, that's a detail, it's.

92
00:06:23.200 --> 00:06:26.310
So, that's adaptive rounding.

93
00:06:26.310 --> 00:06:33.079
We round items up to a value that
depends on the other items in our input.

94
00:06:36.744 --> 00:06:38.280
Observe.

95
00:06:40.600 --> 00:06:43.010
The number of distinct item sizes is what?

96
00:06:44.890 --> 00:06:45.960
It's the number of groups.

97
00:06:47.680 --> 00:06:49.740
The minimum item size is what?

98
00:06:49.740 --> 00:06:52.260
It's still greater than B/10.

99
00:06:52.260 --> 00:06:56.610
So as long as we have a constant
number of groups, we're in good shape.

100
00:06:56.610 --> 00:06:58.696
We have a reduction to
the previous problem.

101
00:07:01.332 --> 00:07:04.540
Let's go directly to the general case.

102
00:07:04.540 --> 00:07:09.178
Assume now that the item sizes are at
least the bin capacity times epsilon.

103
00:07:09.178 --> 00:07:12.360
I need to work towards
an approximation scheme.

104
00:07:13.930 --> 00:07:15.947
The algorithm first sorts the sizes.

105
00:07:15.947 --> 00:07:23.130
Next, makes groups such that each group
has cardinality n times epsilon squared.

106
00:07:24.180 --> 00:07:24.841
How many groups do we have?

107
00:07:24.841 --> 00:07:26.140
One over epsilon squared.

108
00:07:27.750 --> 00:07:33.360
Then, in each group, round all the sizes
up to the max size in a group.

109
00:07:33.360 --> 00:07:37.280
Finally, solve the rounded problem,
as we saw previously.

110
00:07:37.280 --> 00:07:40.240
And then we output
the corresponding packing.

111
00:07:40.240 --> 00:07:43.080
This is our algorithm for large items.

112
00:07:44.340 --> 00:07:48.737
In this algorithm, what is interesting
is this adaptive rounding.

113
00:07:50.672 --> 00:07:55.860
The output is a packing
of the input items.

114
00:07:55.860 --> 00:07:59.930
All sizes are greater than the certain
fraction of the bin capacity.

115
00:07:59.930 --> 00:08:03.290
And the number of distinct sizes
is less that a certain constant.

116
00:08:03.290 --> 00:08:05.330
Therefore, the runtime is polynomial.

117
00:08:07.480 --> 00:08:11.830
But as usual, we have the question
of the quality of the approximation.

118
00:08:11.830 --> 00:08:12.740
How good is it?

119
00:08:13.850 --> 00:08:18.170
What we will prove very soon is that the
value of the output, the number of bins

120
00:08:18.170 --> 00:08:24.450
used by the output is at most OPT
times 1 + a big O of epsilon.

121
00:08:24.450 --> 00:08:29.270
So, in this part,
we have designed a good algorithm for

122
00:08:29.270 --> 00:08:33.630
the case when all items
are large in bin packing.

123
00:08:33.630 --> 00:08:34.782
In the next section,

124
00:08:34.782 --> 00:08:39.070
we will analyze it and prove that it is
indeed a Knapsack approximation scheme.