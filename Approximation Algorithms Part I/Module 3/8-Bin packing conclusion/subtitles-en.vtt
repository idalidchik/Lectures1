WEBVTT

1
00:00:00.337 --> 00:00:07.006
[MUSIC]

2
00:00:07.006 --> 00:00:11.546
Now, what have we learned in
all this work on Bin packing?

3
00:00:11.546 --> 00:00:18.200
We have learned one very novel technique,
Adaptive rounding of the Input.

4
00:00:19.420 --> 00:00:24.420
Not rounding to the nearest integer or
to the nearest fraction of an integer

5
00:00:24.420 --> 00:00:29.020
as in Knapsack, but the rounding that
depends on the rest of the input.

6
00:00:30.510 --> 00:00:33.973
That's one technique that is very
useful for simplifying the input.

7
00:00:33.973 --> 00:00:38.217
Comes up in many problems where
the input is a set of numbers.

8
00:00:38.217 --> 00:00:42.910
The other technique that we have
used is the Russian Dolls technique.

9
00:00:44.230 --> 00:00:49.710
The inner most doll was,
solving the problem in the special case,

10
00:00:49.710 --> 00:00:52.640
where items were large and
there were few distinct sizes.

11
00:00:53.940 --> 00:00:54.750
Close the doll.

12
00:00:55.870 --> 00:01:00.960
The doll outside it was
an algorithm in the case where all

13
00:01:00.960 --> 00:01:05.740
item were large, all item were large,
but not necessarily few distinct items.

14
00:01:05.740 --> 00:01:07.620
We could have many different sizes.

15
00:01:08.670 --> 00:01:13.860
And then, we closed that doll and we got
the outermost doll, through a general case

16
00:01:13.860 --> 00:01:18.969
where there's no assumption on the item
sizes, and a number of distinct items.

17
00:01:20.080 --> 00:01:25.050
So, the Russian dolls technique
is also a technique of

18
00:01:25.050 --> 00:01:29.730
successive reductions, if you want to
use more sophisticated terminology.

19
00:01:31.240 --> 00:01:33.340
Russian dolls, good to remember.

20
00:01:35.090 --> 00:01:39.036
These techniques are very useful,
in general, in the design of algorithms.

21
00:01:41.080 --> 00:01:43.170
There are many variants of Bin packing.

22
00:01:43.170 --> 00:01:48.150
Bin packing is just one simple
case of problems that come up

23
00:01:48.150 --> 00:01:53.540
in many instances of combinatorial
optimization and operations research.

24
00:01:53.540 --> 00:01:58.730
There are some variants in two-dimensions
when the input is not a number,

25
00:01:58.730 --> 00:02:01.130
but it's a square or rectangle.

26
00:02:01.130 --> 00:02:06.150
Three dimensions, each input items
consist of three numbers instead of one.

27
00:02:07.260 --> 00:02:12.770
There are variants where the item arrived
online over time in an online fashion and

28
00:02:12.770 --> 00:02:14.500
you have to decide where to place them,
and

29
00:02:14.500 --> 00:02:17.920
when to close bins before you
see an entire set of items.

30
00:02:19.220 --> 00:02:23.343
Many versions of Bin packing
have been studied over the past.

31
00:02:23.343 --> 00:02:26.978
If you look at studies where
people prove theorems,

32
00:02:26.978 --> 00:02:32.000
rigorous results about Bin packing,
who contributed to this?

33
00:02:32.000 --> 00:02:33.820
Let's see.

34
00:02:34.860 --> 00:02:36.610
This is a familiar picture.

35
00:02:36.610 --> 00:02:38.300
You know who this is now.

36
00:02:38.300 --> 00:02:38.840
Nick Karp.

37
00:02:40.430 --> 00:02:42.086
You know what he's most famous for?

38
00:02:42.086 --> 00:02:45.722
His 1972 paper on NP-complete problems.

39
00:02:45.722 --> 00:02:47.798
Well, Bin packing was one of them.

40
00:02:47.798 --> 00:02:52.780
So he was a pioneer who proved that
this problem is hardly general.

41
00:02:54.060 --> 00:02:56.480
Other pioneers, Johnson and Ullman.

42
00:02:57.650 --> 00:03:00.560
They were the first ones to design and

43
00:03:00.560 --> 00:03:05.240
prove bounds on approximation
algorithms for Bin packing.

44
00:03:05.240 --> 00:03:09.920
In fact, this was part of
the PhD thesis of David Johnson.

45
00:03:09.920 --> 00:03:13.910
And throughout his career, he never
stopped being interested in Bin packing.

46
00:03:15.410 --> 00:03:17.470
These are the pioneers.

47
00:03:17.470 --> 00:03:18.810
What happened next?

48
00:03:18.810 --> 00:03:21.292
Next, the problem was NP-complete and

49
00:03:21.292 --> 00:03:24.510
we had constant factor
approximation algorithms.

50
00:03:26.010 --> 00:03:28.342
Then people turned to
average case analysis.

51
00:03:28.342 --> 00:03:31.213
That was big in the 1980s in particular.

52
00:03:31.213 --> 00:03:34.800
So, you know, in the worst case you
cannot solve the problem exactly.

53
00:03:34.800 --> 00:03:39.425
But what do you do if the items
are drawn from sound investigation?

54
00:03:39.425 --> 00:03:43.554
Initially, there was some
work by this familiar guy,

55
00:03:43.554 --> 00:03:47.429
whose name you should know by now,
and Karmarkar.

56
00:03:47.429 --> 00:03:52.076
They did some initial work
analyzing some algorithms for

57
00:03:52.076 --> 00:03:55.670
Bin packing in the average case.

58
00:03:55.670 --> 00:03:57.471
Then more work was done by many people.

59
00:03:57.471 --> 00:03:59.920
There's a whole set of mathematicians and

60
00:03:59.920 --> 00:04:04.069
computer scientists working on
average cases Bin packing, and

61
00:04:04.069 --> 00:04:07.960
analyzing particular Bin packing
algorithms in the average case.

62
00:04:08.970 --> 00:04:12.050
Prominent among them is David Johnson.

63
00:04:12.050 --> 00:04:15.710
And I didn't have enough room here to get
pictures of everyone who got involved in

64
00:04:15.710 --> 00:04:22.800
this direction, but I just wanted
to get a picture of Lisa McGeoch.

65
00:04:22.800 --> 00:04:25.280
All right.
That's average case analysis.

66
00:04:25.280 --> 00:04:27.050
Approximation schemes.

67
00:04:27.050 --> 00:04:29.600
Asymptotic approximation schemes.

68
00:04:29.600 --> 00:04:31.160
What can we say about this?

69
00:04:31.160 --> 00:04:34.080
Oh, we learned something else this week.

70
00:04:34.080 --> 00:04:38.504
We learned that if we cannot
find an approximation scheme,

71
00:04:38.504 --> 00:04:44.261
because distinguishing between two
bins and three bins is anti-complete.

72
00:04:44.261 --> 00:04:48.710
Then, we can change the definition and
focus on asymptotic instances.

73
00:04:50.200 --> 00:04:55.320
And then, this was done first by
Fernandez de la Vega and Lueker,

74
00:04:55.320 --> 00:05:00.970
who invented adaptive rounding and
used it to design the algorithm,

75
00:05:00.970 --> 00:05:05.680
which we saw designed and
analyzed in this class.

76
00:05:07.070 --> 00:05:08.810
But you can do better than this.

77
00:05:08.810 --> 00:05:15.140
After this, shortly afterwards,
Karmarkar and Karp took the same ideas and

78
00:05:15.140 --> 00:05:20.230
used a better, much better,
more sophisticated analysis, and

79
00:05:20.230 --> 00:05:24.160
used linear programming in a sophistic
fashion, sophisticated fashion.

80
00:05:24.160 --> 00:05:29.200
And they managed to get an algorithm
using a number of bins that is,

81
00:05:29.200 --> 00:05:31.630
at most, OPT plus a little bit.

82
00:05:32.790 --> 00:05:33.892
What is that little bit?

83
00:05:33.892 --> 00:05:37.093
Big O of log squared OPT.

84
00:05:37.093 --> 00:05:40.960
When OPT goes to infinity,
log squared OPT is much less than OPT.

85
00:05:40.960 --> 00:05:43.250
So this is almost optimal.

86
00:05:43.250 --> 00:05:50.042
It's a much finer way to view Bin packing.

87
00:05:50.042 --> 00:05:53.343
Then, nothing for

88
00:05:53.343 --> 00:05:58.712
30 years, until 2015.

89
00:05:58.712 --> 00:06:02.676
Rebecca Hoberg and Thomas Rothvoss.

90
00:06:02.676 --> 00:06:04.673
Look at how young they
are compared to the others.

91
00:06:04.673 --> 00:06:09.555
That's because they've been
doing this work in 2015.

92
00:06:09.555 --> 00:06:13.300
They reduced the log
squared OPT to log OPT.

93
00:06:13.300 --> 00:06:16.717
So this is an even better
asymptotic approximation scheme.

94
00:06:16.717 --> 00:06:21.512
So I wanted to show you this because
we just started studying approximation

95
00:06:21.512 --> 00:06:26.600
algorithms and already,
we are at the level of current research.

96
00:06:26.600 --> 00:06:31.910
If we were learning more about inner
programming, about discrepancy theory,

97
00:06:31.910 --> 00:06:36.600
and about clever rounding,
then we'd be able to read this paper and

98
00:06:36.600 --> 00:06:38.820
understand current
research on Bin packing.

99
00:06:41.300 --> 00:06:44.400
So now, probably you've hear
enough of this problem,

100
00:06:44.400 --> 00:06:47.660
enough of Bin packing,
enough of working with numbers.

101
00:06:47.660 --> 00:06:51.092
In the next chapter we'll start
working on graph problems again.