WEBVTT

1
00:00:00.000 --> 00:00:04.195
[MUSIC]

2
00:00:04.195 --> 00:00:07.670
So, far we have defined
the bin packing problem.

3
00:00:08.860 --> 00:00:11.530
We have designed the next fit algorithm.

4
00:00:12.560 --> 00:00:18.770
We have analyzed it and proved that
it's asymptotically a 2-approximation.

5
00:00:18.770 --> 00:00:20.830
Can we do better than this?

6
00:00:20.830 --> 00:00:24.000
Can we do better than
the next fit algorithm.

7
00:00:24.000 --> 00:00:27.170
In this part to try to
do better we will design

8
00:00:27.170 --> 00:00:29.280
a linear programming
relaxation from the problem.

9
00:00:30.830 --> 00:00:37.268
Let me reveal all ready out
ultimate goal for in this course.

10
00:00:37.268 --> 00:00:42.250
Our goal is to get approximation scheme.

11
00:00:42.250 --> 00:00:46.900
Our wish is to design
an algorithm that for

12
00:00:46.900 --> 00:00:53.380
each epsilon is by epsilon and
outputs packing into bins,

13
00:00:53.380 --> 00:00:59.670
a number of bins that is at most 1+epsilon
times plus some lower order terms.

14
00:01:01.370 --> 00:01:05.510
For this we will first
try what is fast becoming

15
00:01:05.510 --> 00:01:09.600
our standard approach to coming
at all optimization problems.

16
00:01:09.600 --> 00:01:14.210
Model them as an integer program and
try a linear programming relaxation.

17
00:01:16.270 --> 00:01:21.810
So, we now need to come up with
an integer program for bin packing.

18
00:01:23.770 --> 00:01:27.290
Recall that in bin packing,
you have n items.

19
00:01:27.290 --> 00:01:30.900
You want to pack them into the minimum
number of unit capacity bins.

20
00:01:32.710 --> 00:01:36.640
We will find an integer program for a
slightly different version of the problem,

21
00:01:36.640 --> 00:01:39.190
the decision version of the problem.

22
00:01:39.190 --> 00:01:41.670
Given n items.

23
00:01:41.670 --> 00:01:47.490
And given K, the number of unit bins,
the goal is to decide whether or

24
00:01:47.490 --> 00:01:53.840
not there exists a packing of
the n items into the K bins.

25
00:01:53.840 --> 00:01:56.690
Whether they fit into K bins.

26
00:01:56.690 --> 00:01:59.960
Clearly, if you can solve one problem,
you can solve the other.

27
00:01:59.960 --> 00:02:01.790
The two problems are equivalent.

28
00:02:03.740 --> 00:02:06.030
How do we get an integer program for
this problem?

29
00:02:07.230 --> 00:02:09.020
We're going to use some variables.

30
00:02:09.020 --> 00:02:10.690
Zero one variables.

31
00:02:10.690 --> 00:02:12.260
What do we need to know?

32
00:02:12.260 --> 00:02:16.896
A packing is a positioning
of the items into the bins.

33
00:02:16.896 --> 00:02:23.770
A packing is a way to decide for
each item in which bin it's going to go.

34
00:02:24.880 --> 00:02:29.850
So, this suggests defining a variable,
xij, for

35
00:02:29.850 --> 00:02:33.820
each item i and each bin j.

36
00:02:33.820 --> 00:02:37.810
It's a two dimensional set of variables.

37
00:02:37.810 --> 00:02:45.020
Xj will be equal to 1, if and only if,
item i Can be placed into bin j.

38
00:02:46.990 --> 00:02:49.200
That's the definition of our variables.

39
00:02:49.200 --> 00:02:52.820
Xij will be one if item i goes into bin j.

40
00:02:52.820 --> 00:02:54.650
Xi equals zero if not.

41
00:02:56.060 --> 00:02:59.830
Let us go back to the example
we talked about originally.

42
00:03:01.080 --> 00:03:05.334
Let the items be called A-B-C-D-E-F.

43
00:03:06.460 --> 00:03:13.690
In the case of the packing you see on
the screen, item A goes into bin 1.

44
00:03:13.690 --> 00:03:16.760
So Xa1 is 1.

45
00:03:16.760 --> 00:03:20.550
Our terms b and f go into bin 2.

46
00:03:20.550 --> 00:03:24.300
So, Xb2 and Xf2 are both equal to 1.

47
00:03:24.300 --> 00:03:28.050
Similarly, Item d goes into bin 4.

48
00:03:28.050 --> 00:03:30.470
So x d 4 equals 1.

49
00:03:30.470 --> 00:03:33.690
The other two items go into bin 3.

50
00:03:33.690 --> 00:03:39.610
So x e 3 and x f 3 are both equal to 1.

51
00:03:39.610 --> 00:03:44.580
And for all the other possibilities,
x i j is equal to 0.

52
00:03:44.580 --> 00:03:51.473
This defines correspondents between
placements of items into bins,

53
00:03:51.473 --> 00:03:57.800
packings, and
zero one values to the variables, XIJ.

54
00:03:58.890 --> 00:04:02.230
I ranges all over possible items.

55
00:04:02.230 --> 00:04:06.630
J ranges all over possible bins,
1 through K.

56
00:04:09.110 --> 00:04:10.740
Now, we have our variables.

57
00:04:10.740 --> 00:04:14.050
To define the integer program,
we need constraints.

58
00:04:16.240 --> 00:04:19.390
How do we define our constraints?

59
00:04:19.390 --> 00:04:21.640
What are the constraints?

60
00:04:21.640 --> 00:04:26.630
The first constraint is
easy to phrase in English.

61
00:04:26.630 --> 00:04:30.190
Every item Must go somewhere.

62
00:04:30.190 --> 00:04:33.970
Every item must go into one of the bins.

63
00:04:35.420 --> 00:04:43.190
Item B for example, must go into bin one,
two, three, or four.

64
00:04:43.190 --> 00:04:46.090
How can we express this algebraically?

65
00:04:46.090 --> 00:04:50.940
It's simple, if we look at
the variables xb1, xb2, xb3 and

66
00:04:50.940 --> 00:04:57.380
xb4, exactly one of them must be equal
to one and the others equal to zero.

67
00:04:57.380 --> 00:05:00.530
The sum of these four variables
must be equal to one.

68
00:05:01.820 --> 00:05:06.280
We can write similar constraints for
all the other items in our input.

69
00:05:06.280 --> 00:05:09.140
So, we have one constraint for each item.

70
00:05:09.140 --> 00:05:13.850
Expressing the fact that the item
must go into one of the bins.

71
00:05:15.220 --> 00:05:17.960
What other constraints do we have for
the integer program?

72
00:05:19.910 --> 00:05:21.880
The bins have a capacity.

73
00:05:21.880 --> 00:05:25.930
The items that go in the same bin,
must not exceed the bin capacity.

74
00:05:27.300 --> 00:05:29.020
How can we write this?

75
00:05:29.020 --> 00:05:33.930
If we look at all the items
that go into bin number j

76
00:05:33.930 --> 00:05:38.100
their sizes must sum to at most one,
the bin capacity.

77
00:05:39.420 --> 00:05:42.310
How can we express this algebraically?

78
00:05:42.310 --> 00:05:46.950
If we look at Xaj times the size of item

79
00:05:46.950 --> 00:05:53.210
a This is equal to zero if
item a doesn't go in j,

80
00:05:53.210 --> 00:05:57.030
and is equal to s of a,
the size of item a, otherwise.

81
00:05:58.140 --> 00:06:03.820
Some, this and similar expressions for
all the items, what do you get?

82
00:06:03.820 --> 00:06:08.750
You get a contribution of zero for
every item that is not in bin j.

83
00:06:08.750 --> 00:06:12.030
And the contribution of
the item size otherwise.

84
00:06:12.030 --> 00:06:18.260
The sum is equal to the total
item sizes in bin j.

85
00:06:18.260 --> 00:06:21.600
So, that sum must be less than,
or equal to, 1.

86
00:06:21.600 --> 00:06:29.670
That's how to express the constraint that
the bin capacity must not be exceeded.

87
00:06:29.670 --> 00:06:32.800
There is one such constraint For each bin.

88
00:06:32.800 --> 00:06:34.960
J equals 1, 2, 3, through k.

89
00:06:37.040 --> 00:06:42.620
So, all together, this defines our
integer program for bin packing.

90
00:06:43.770 --> 00:06:46.090
N items, k bins.

91
00:06:46.090 --> 00:06:51.240
Variables x i j,
whether item i goes into bin j For

92
00:06:51.240 --> 00:06:54.250
every item i, it must go somewhere.

93
00:06:54.250 --> 00:06:59.070
The sum of all [INAUDIBLE]
of xij must be equal to 1.

94
00:06:59.070 --> 00:07:04.950
For every bin j,
the bin capacity must not be exceeded.

95
00:07:04.950 --> 00:07:11.890
The sum of xijsi over all items
i Musty less than capacity.

96
00:07:13.450 --> 00:07:19.600
Finally XIJ for every time IN
bin J must be equal to 0 or 1.

97
00:07:19.600 --> 00:07:24.700
This integer program is feasible,
has a solution, if and

98
00:07:24.700 --> 00:07:30.380
only if there exists a packing
of the times not K bins.

99
00:07:30.380 --> 00:07:33.720
This is an integer program for
bin backing.

100
00:07:35.660 --> 00:07:40.740
So, I started by saying that we would try
to find a linear programming relaxation.

101
00:07:40.740 --> 00:07:44.510
From this,
it is easy to deduce a relaxation.

102
00:07:44.510 --> 00:07:48.410
We just replace the constraint that
x i j must be equal to zero or

103
00:07:48.410 --> 00:07:50.310
one by the constraint...

104
00:07:50.310 --> 00:07:54.860
That XRJ is a real number between 0 and 1.

105
00:07:54.860 --> 00:07:58.820
That is,
The Linear Programming Relaxation.

106
00:07:58.820 --> 00:08:03.320
Observe that it is exactly the same as
before, except that the last line is

107
00:08:03.320 --> 00:08:08.624
replaced by XIJ is between 0 and 1.

108
00:08:10.620 --> 00:08:14.140
Now, we want to use this
Linear Programming relaxation

109
00:08:14.140 --> 00:08:17.040
to design an algorithm for bin packing.

110
00:08:17.040 --> 00:08:18.910
To fin how to pack items.

111
00:08:20.730 --> 00:08:23.580
The first thing to design such a algorithm

112
00:08:23.580 --> 00:08:28.590
is to check that the Linear
programming relaxation is good.

113
00:08:28.590 --> 00:08:33.050
Good meaning it's close enough
to the integer program.

114
00:08:33.050 --> 00:08:37.080
So, we turn to this linear program and
we ask ourselves.

115
00:08:37.080 --> 00:08:42.180
We lost something some accuracy when
we replaced the condition X I J equal

116
00:08:42.180 --> 00:08:47.740
to 0 1 by the condition
X I J between O and 1.

117
00:08:47.740 --> 00:08:49.600
How much did we lose?

118
00:08:49.600 --> 00:08:54.173
What is the gap of this linear
programming relaxation?

119
00:08:56.489 --> 00:08:59.416
I have some bad news.

120
00:09:01.467 --> 00:09:03.458
Here's a bad example.

121
00:09:06.058 --> 00:09:12.180
Five items 3 bins.

122
00:09:12.180 --> 00:09:14.190
All the items have size 0.6.

123
00:09:14.190 --> 00:09:17.330
The bins have unit capacity.

124
00:09:17.330 --> 00:09:20.880
If you have 5 items that
each have size equal to 0.6,

125
00:09:20.880 --> 00:09:23.610
you need 5 bins to pack them.

126
00:09:23.610 --> 00:09:25.650
Obviously, OPT is equal to 5.

127
00:09:25.650 --> 00:09:28.040
5 bins are necessary.

128
00:09:29.140 --> 00:09:30.570
What about the linear program?

129
00:09:32.100 --> 00:09:36.540
I claim that it is possible
according to the linear programming

130
00:09:36.540 --> 00:09:40.250
relaxation to solve the linear program.

131
00:09:40.250 --> 00:09:44.820
And find the solution
when k is equal to 3.

132
00:09:44.820 --> 00:09:45.440
3 bins.

133
00:09:47.370 --> 00:09:49.630
Let's see how to do this.

134
00:09:49.630 --> 00:09:52.870
j equals 1, j equals 2, j equals 3.

135
00:09:52.870 --> 00:09:55.520
K is 3.

136
00:09:55.520 --> 00:09:59.860
5 identical items,
we need to define Xji for

137
00:09:59.860 --> 00:10:04.890
every i between 1 and 5 and
for every j between 1 and 3.

138
00:10:04.890 --> 00:10:06.180
Every item, every bin.

139
00:10:07.220 --> 00:10:14.390
Let's define every xij to be equal to 1/3
uniformly over all items and all bins.

140
00:10:15.790 --> 00:10:21.490
We can check that every item
fractionally is packed somewhere.

141
00:10:21.490 --> 00:10:26.215
For example, the first item is packed for
1/3 into bin 1.

142
00:10:26.215 --> 00:10:30.410
One-third into bin two,
one-third into bin three.

143
00:10:30.410 --> 00:10:34.804
The sum of the Xi,js for
item one is equal to

144
00:10:34.804 --> 00:10:39.540
one-third plus one-third plus one-third,
one.

145
00:10:39.540 --> 00:10:44.110
Next, we need to check that
the bin capacity is not exceeded.

146
00:10:44.110 --> 00:10:46.700
Let's look at bin one for example.

147
00:10:46.700 --> 00:10:49.530
We sum the X,I,J's times their sizes.

148
00:10:49.530 --> 00:10:50.050
Times .6.

149
00:10:50.050 --> 00:10:55.962
We have a sum with 5 terms,
each term is 1/3 times .6.

150
00:10:55.962 --> 00:10:59.490
5 times 1/3 times .6 that's 1.

151
00:10:59.490 --> 00:11:03.990
This constraint is also satisfied.

152
00:11:05.150 --> 00:11:11.230
So, what we have just given here
is a value of the X,I,J's That

153
00:11:11.230 --> 00:11:14.970
satisfies all the constraints of
the linear programming relaxation.

154
00:11:15.980 --> 00:11:17.860
According to the linear program,

155
00:11:17.860 --> 00:11:23.420
it seems that it should be possible
to pack these items into three bins.

156
00:11:23.420 --> 00:11:26.280
In reality, five bins are necessary.

157
00:11:26.280 --> 00:11:30.330
This means that we are off by
a factor of five-thirds, at least.

158
00:11:30.330 --> 00:11:34.710
No matter what our algorithm will do,
If it tries to use this LP,

159
00:11:34.710 --> 00:11:39.820
it risks being off by
a factor of five-thirds.

160
00:11:39.820 --> 00:11:44.590
And so, what we have seen here is
our first attempt to design a linear

161
00:11:44.590 --> 00:11:50.700
programming relaxation to get the better
solution for bin packing Has failed.

162
00:11:50.700 --> 00:11:53.360
So, we have to have some better idea,

163
00:11:53.360 --> 00:11:58.480
we have to explore more structure,
more properties of inpacking.

164
00:11:58.480 --> 00:12:01.210
And that is what we will
proceed to do in the next part.