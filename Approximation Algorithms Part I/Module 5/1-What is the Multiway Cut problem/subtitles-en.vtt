WEBVTT

1
00:00:00.000 --> 00:00:06.300
[MUSIC]

2
00:00:06.300 --> 00:00:09.910
Welcome back to the course
on approximation algorithms.

3
00:00:09.910 --> 00:00:15.240
In this chapter, we're going to study a
new problem, the multiway cut problem, and

4
00:00:15.240 --> 00:00:19.540
develop a new interesting linear
program and relaxation and

5
00:00:19.540 --> 00:00:23.339
use it to design an original
version of randomized rounding.

6
00:00:25.870 --> 00:00:28.320
What is the multiway cut problem?

7
00:00:28.320 --> 00:00:32.250
It's defined by its input and its output.

8
00:00:32.250 --> 00:00:37.780
The input is a graph where the edges
of the graph has some weights,

9
00:00:37.780 --> 00:00:42.530
and in this graph, there's some
special vertices called terminals.

10
00:00:42.530 --> 00:00:44.660
We have k of them, where k is fixed.

11
00:00:44.660 --> 00:00:49.640
Maybe two, maybe three,
maybe six as in the case of this picture.

12
00:00:50.660 --> 00:00:53.750
Six special vertices called terminals.

13
00:00:53.750 --> 00:00:58.400
The goal is to cut those
terminals from one another.

14
00:00:58.400 --> 00:00:59.250
How?

15
00:00:59.250 --> 00:01:01.020
But cutting edges.

16
00:01:01.020 --> 00:01:07.640
So, the output is a subset of edges,
subset F, such that if you removed those

17
00:01:07.640 --> 00:01:12.140
edges from the graph, all the terminals
are disconnected from one another, and

18
00:01:12.140 --> 00:01:15.620
your goal is to minimize
the weight of the edges you cut.

19
00:01:15.620 --> 00:01:20.480
So, that's the multiway cut problem.

20
00:01:20.480 --> 00:01:23.360
There's a special case
which is quite familiar.

21
00:01:23.360 --> 00:01:29.010
When k is equal to 2, k=2,
2 terminals, a and b.

22
00:01:29.010 --> 00:01:33.890
Disconnect a from b using
edges of minimum weight.

23
00:01:33.890 --> 00:01:38.750
That's a cut,
a cut disconnecting a from b, min cut.

24
00:01:38.750 --> 00:01:41.879
That's the famous min cut problem, which,

25
00:01:41.879 --> 00:01:46.587
as we know, is polynomial time,
can be solved in polynomial time.

26
00:01:46.587 --> 00:01:49.570
Next case, k = 3.

27
00:01:49.570 --> 00:01:50.770
Three terminals, a,

28
00:01:50.770 --> 00:01:55.610
b, c, that must be disconnected from one
another by a minimum weight set of edges.

29
00:01:57.070 --> 00:02:01.140
That problem is already NP-hard,
already for k = 3.

30
00:02:01.140 --> 00:02:06.314
This is not really surprising because
it's one of many cases of problems

31
00:02:06.314 --> 00:02:11.712
in minimal optimization where
the case k = 2 is simple, and

32
00:02:11.712 --> 00:02:17.080
k = 3 or more is hard and
NP-hard to solve exactly.

33
00:02:20.230 --> 00:02:24.532
So here's a simple algorithm for k = 3.

34
00:02:24.532 --> 00:02:27.920
We take our three terminals, a, b, c.

35
00:02:29.310 --> 00:02:37.750
Let's compute the minimum way to
cut vertex a from vertices b and c.

36
00:02:37.750 --> 00:02:40.620
The minimum way to disconnect a from b and
c.

37
00:02:42.000 --> 00:02:43.270
Here it is.

38
00:02:43.270 --> 00:02:47.700
If you cut the graph this way,
this is a minimum way,

39
00:02:47.700 --> 00:02:51.910
minimum weight set of edges
that disconnects the graph.

40
00:02:51.910 --> 00:02:54.814
It's a partition of
the vertices into two subsets,

41
00:02:54.814 --> 00:02:58.246
such that the edges across to
cut have the minimum weight, and

42
00:02:58.246 --> 00:03:00.820
it disconnects vertex
a from vertices b and c.

43
00:03:01.980 --> 00:03:06.580
Second, we solve the same problem,
isolating vertex b.

44
00:03:06.580 --> 00:03:13.480
Find the minimum cut separating
vertex b from vertices a and c.

45
00:03:13.480 --> 00:03:17.260
A partition on the graph into
vertices on the b side and

46
00:03:17.260 --> 00:03:18.973
the vertices on the a or c side.

47
00:03:20.240 --> 00:03:22.020
Third, similarly,

48
00:03:22.020 --> 00:03:27.010
you compute the minimum cut separating
vertex C from the other two vertices.

49
00:03:27.010 --> 00:03:28.280
The other two terminals.

50
00:03:28.280 --> 00:03:29.620
And now what do you do?

51
00:03:29.620 --> 00:03:34.960
You take this three cuts,
you choose the two cheapest ones and

52
00:03:34.960 --> 00:03:36.540
you output their union.

53
00:03:37.640 --> 00:03:38.450
Here it is.

54
00:03:38.450 --> 00:03:40.560
In this case,
it turns out that the red and

55
00:03:40.560 --> 00:03:45.850
the purple cuts are the cheapest of
the three, and so, this is your solution.

56
00:03:47.830 --> 00:03:49.710
Okay, so that is the algorithm.

57
00:03:49.710 --> 00:03:50.260
Very simple.

58
00:03:52.120 --> 00:03:55.110
Now, is this algorithm
a working algorithm?

59
00:03:56.810 --> 00:03:59.540
Can it be solved in polynomial time?

60
00:03:59.540 --> 00:04:00.040
Let's see.

61
00:04:01.440 --> 00:04:06.920
We need to find as a sub routine a way
to separate vertex a from vertices b and

62
00:04:06.920 --> 00:04:09.760
c in polynomial time.

63
00:04:09.760 --> 00:04:14.120
This can be done easily by
a reduction to the mincut problem.

64
00:04:14.120 --> 00:04:14.620
Here is how.

65
00:04:15.950 --> 00:04:18.190
You create a new vertex called s.

66
00:04:19.190 --> 00:04:20.920
And other new vertex called t.

67
00:04:22.370 --> 00:04:27.540
You connect s to a with
an edge of infinite weight.

68
00:04:27.540 --> 00:04:32.470
You connect vertices b and c to t,
with edges of infinite weight.

69
00:04:33.690 --> 00:04:39.750
In this new graph, you solve the mincut
problem, mincut separating s from t.

70
00:04:41.900 --> 00:04:44.840
This minimum cut will never

71
00:04:44.840 --> 00:04:48.456
use the infinite with edges
because that could be too costly.

72
00:04:48.456 --> 00:04:51.930
So it will use only edges from
the inside of the graph, and so

73
00:04:51.930 --> 00:04:57.820
it will give you a solution that
has a on the same side as s.

74
00:04:57.820 --> 00:05:03.900
b and c on the same side as t,
therefore it will separate a from bc.

75
00:05:03.900 --> 00:05:08.410
In fact, the cuts are in exact
one to one correspondence.

76
00:05:08.410 --> 00:05:11.440
The cuts from s to t and from a to bc.

77
00:05:12.630 --> 00:05:15.110
So, we can solve this in polynomial time.

78
00:05:17.400 --> 00:05:19.800
Is the output correct?

79
00:05:19.800 --> 00:05:21.660
Is it a three way cut?

80
00:05:21.660 --> 00:05:24.330
Does it separate the three
terminals from one another?

81
00:05:25.520 --> 00:05:26.380
Well, let's see.

82
00:05:27.570 --> 00:05:30.510
Here we take the red and
the purple solutions.

83
00:05:30.510 --> 00:05:34.740
The red cut separates
vertex a from both b and c.

84
00:05:36.760 --> 00:05:41.380
So now, there's no connection from
a to b and no connection from b to c.

85
00:05:41.380 --> 00:05:46.700
There could still be connections between
b and c, but thanks to the purple cut

86
00:05:46.700 --> 00:05:52.340
that separates c from the other two
vertices, c is disconnected from b.

87
00:05:52.340 --> 00:05:56.020
And so the solution is a three-way cut.

88
00:05:56.020 --> 00:05:58.640
It is a correct solution to the problem.

89
00:06:00.970 --> 00:06:03.310
Finally, how good is it?

90
00:06:03.310 --> 00:06:04.760
What is the cost of the output?

91
00:06:06.360 --> 00:06:12.470
We said over three cuts
separating a from bc, b from ac,

92
00:06:12.470 --> 00:06:18.860
and c from ab, the output cost is
the two cheapest of these three terms.

93
00:06:18.860 --> 00:06:21.880
So its cost is at most,
two-thirds of the sum.

94
00:06:22.890 --> 00:06:25.990
The cost of the output
of this simple algorithm

95
00:06:25.990 --> 00:06:28.850
is at most two-thirds times
the sum of the mincuts.

96
00:06:30.780 --> 00:06:35.280
So, we have upperbounded the cost
of the output of the algorithm.

97
00:06:36.440 --> 00:06:39.778
To continue with the analysis as usual,

98
00:06:39.778 --> 00:06:43.712
what we need to do is
lowerbound the cost of OPT.

99
00:06:43.712 --> 00:06:46.379
Consider OPT.

100
00:06:46.379 --> 00:06:52.440
OPT is greater than or
equal to the mincut from a to bc.

101
00:06:52.440 --> 00:06:53.270
Why?

102
00:06:53.270 --> 00:06:57.090
Because the absolution separates all
three terminals from one another.

103
00:06:57.090 --> 00:07:00.620
So it does separate terminal
a from the other two terminals.

104
00:07:00.620 --> 00:07:04.040
So it is a feasible cut from a to bc, and

105
00:07:04.040 --> 00:07:08.670
therefore, the value of OPT is at
least the mincut from a to bc.

106
00:07:10.650 --> 00:07:14.530
Similarly, it's at least
the mincut from b to ac.

107
00:07:14.530 --> 00:07:16.725
And at least the mincut from c to ab.

108
00:07:18.130 --> 00:07:23.878
So, if it's at least each of these three
terms, then it's at least their average.

109
00:07:23.878 --> 00:07:27.710
At least one-third of
the sum of the mincuts.

110
00:07:29.030 --> 00:07:33.220
The output is at most two thirds
of the sum of the mincuts.

111
00:07:33.220 --> 00:07:37.070
OPT is at least one third
of the sum on the mincuts,

112
00:07:37.070 --> 00:07:40.790
therefore the algorithm
is a two approximation.

113
00:07:42.560 --> 00:07:46.000
We have proof that our solution
is a two approximation.

114
00:07:47.670 --> 00:07:48.400
Can you do better?

115
00:07:49.740 --> 00:07:53.830
You can do better if you do your
analysis a little bit more carefully.

116
00:07:53.830 --> 00:07:57.120
Let's see.

117
00:07:57.120 --> 00:08:01.180
Let's go directly to an extension for
k general.

118
00:08:01.180 --> 00:08:02.590
We have k terminals, a1, a2, ak.

119
00:08:02.590 --> 00:08:08.070
The natural extension of
the algorithm is to output

120
00:08:08.070 --> 00:08:13.166
the k-1 smallest of all
k mincuts where the ith

121
00:08:13.166 --> 00:08:19.040
one separates terminal i for
all the other terminals.

122
00:08:20.310 --> 00:08:24.910
Again, here again,
this can be done in polynomial time,

123
00:08:24.910 --> 00:08:29.930
because to compute the mincut separating
terminal ai from the other terminals,

124
00:08:29.930 --> 00:08:33.830
we connect, or
solve s with an infinite edge to ai.

125
00:08:35.435 --> 00:08:39.810
Sync t with infinite edges
to all the other terminals.

126
00:08:39.810 --> 00:08:41.950
And then we solve mincut from s to t.

127
00:08:43.560 --> 00:08:49.750
So this is a polylimal time algorithm
that gives you k way cut, a meltaway cut.

128
00:08:49.750 --> 00:08:52.762
And what we need to do
is analyze it's value.

129
00:08:52.762 --> 00:08:55.388
Let's see.

130
00:08:55.388 --> 00:09:01.700
Similarly, we output the k-
1 smallest of k cuts.

131
00:09:03.120 --> 00:09:05.960
The cost of this output
can be upper bounded

132
00:09:05.960 --> 00:09:10.930
by what it would be on average if we had
a random choice of k- 1 cuts among k.

133
00:09:11.980 --> 00:09:17.810
And so, the cost of the output
is at most k minus 1 over k,

134
00:09:17.810 --> 00:09:20.530
times the sum of the mincuts.

135
00:09:20.530 --> 00:09:24.420
The sum of over every i of
the value of the mincut

136
00:09:24.420 --> 00:09:27.920
separating terminal ai from
all of the other terminals.

137
00:09:29.270 --> 00:09:32.160
That's the upper bound on
the cost of the output.

138
00:09:33.490 --> 00:09:36.200
Now let's do a lower
bound on the cost of OPT.

139
00:09:38.730 --> 00:09:39.620
Let's analyze OPT.

140
00:09:41.970 --> 00:09:47.540
The optimal solution, I claim,
defines some cuts separating for

141
00:09:47.540 --> 00:09:51.210
each I, terminal AI,
from all the other terminals.

142
00:09:52.810 --> 00:09:57.330
Indeed consider an edge e,
which is part of the OPT solution.

143
00:09:58.540 --> 00:10:01.120
Why is e part of OPT?

144
00:10:01.120 --> 00:10:06.870
Because if we left e in the graph,
then two terminals would be connected.

145
00:10:06.870 --> 00:10:09.790
There would be two terminals
that would be connected.

146
00:10:09.790 --> 00:10:12.700
That's why OPT has to remove edge e.

147
00:10:13.760 --> 00:10:18.060
So it must be that,
edge e, once we remove it,

148
00:10:18.060 --> 00:10:21.755
it separates some terminal
ai from some terminal aj.

149
00:10:21.755 --> 00:10:27.721
Next, put this at e at
a set of edges F(I) and

150
00:10:27.721 --> 00:10:31.050
in a set of edges F(J).

151
00:10:31.050 --> 00:10:36.080
Each edge of OPT this way,
we put it into two sets, F(I).

152
00:10:36.080 --> 00:10:37.500
In F(j).

153
00:10:37.500 --> 00:10:43.420
If this edge connects,
if edge e connects a vertex which is

154
00:10:43.420 --> 00:10:49.150
in the cluster of ai, with a vertex
that is in the cluster of terminal j.

155
00:10:51.320 --> 00:10:55.490
That is the definition of F(i) and F(j).

156
00:10:57.440 --> 00:11:04.160
In other words,
define F(i) as the set of edges of OPT

157
00:11:04.160 --> 00:11:09.710
that separate terminal ai from some
terminal aj for j different from i.

158
00:11:11.180 --> 00:11:15.180
Every edge e in OPT belongs to two sets,
F(i) and F(j).

159
00:11:16.480 --> 00:11:22.580
So, if we sum the cost of all these
F(i)'s, every edge appears twice.

160
00:11:22.580 --> 00:11:25.270
So, we get exactly 2 times OPT.

161
00:11:26.940 --> 00:11:29.975
So this gives us a way to
express the value of OPT,

162
00:11:29.975 --> 00:11:35.265
2 times OPT is equal to the sum
over i of the cost of F(i).

163
00:11:37.350 --> 00:11:38.340
Moving on.

164
00:11:38.340 --> 00:11:41.642
How do we analyze the cost of F(i)?

165
00:11:41.642 --> 00:11:42.926
F(i).

166
00:11:42.926 --> 00:11:46.240
F(i) consists of all the edges of OPT

167
00:11:46.240 --> 00:11:49.046
that separate terminal ai
from some other terminal.

168
00:11:49.046 --> 00:11:55.250
So F(i) separates ai from
the rest of the terminals.

169
00:11:55.250 --> 00:12:02.060
And so the cost of F(i) is at least the
minimum cost to separate ai from the rest.

170
00:12:02.060 --> 00:12:06.480
So the cost of (Fi) is greater than or
equal to the Mincut.

171
00:12:06.480 --> 00:12:09.210
Mincut of ai from the other terminals.

172
00:12:11.160 --> 00:12:13.270
Let's do this, take this and sum now.

173
00:12:14.690 --> 00:12:20.310
When we sum, we get 2 times OPT,
which is the sum

174
00:12:20.310 --> 00:12:25.770
of the cost of fi is at least
the sum over i of all the min cuts.

175
00:12:25.770 --> 00:12:28.390
2 times OPT is at least

176
00:12:28.390 --> 00:12:33.129
the sum over i of the mincut separating
terminal ai from the other terminals.

177
00:12:34.500 --> 00:12:38.170
Now all we have to do is combine
this with our upper bound

178
00:12:38.170 --> 00:12:40.280
on the cost of the output
of the algorithm.

179
00:12:42.140 --> 00:12:47.950
The cost of the output is at most k
minus 1 over k times the sum of mincuts.

180
00:12:47.950 --> 00:12:48.730
That, we proved.

181
00:12:50.130 --> 00:12:53.780
Now this sum of the mincuts
is at most 2 times OPT.

182
00:12:53.780 --> 00:12:55.530
So what does this give you?

183
00:12:55.530 --> 00:13:02.711
It shows that the algorithm is a 2
times 1 minus 1 over k approximation.

184
00:13:02.711 --> 00:13:07.470
The algorithm is an approximation with
an approximation ratio of 2 times

185
00:13:07.470 --> 00:13:08.420
1 minus 1 over k.

186
00:13:09.970 --> 00:13:10.880
K = 2.

187
00:13:10.880 --> 00:13:13.030
What does this give us?

188
00:13:13.030 --> 00:13:15.320
2 times 1 minus one-half.

189
00:13:15.320 --> 00:13:15.910
That's 1.

190
00:13:15.910 --> 00:13:17.190
1 times OPT.

191
00:13:17.190 --> 00:13:18.440
The algorithm is optimal.

192
00:13:19.560 --> 00:13:21.215
Indeed, it's just computing a mincut.

193
00:13:22.550 --> 00:13:25.150
K = 3.

194
00:13:25.150 --> 00:13:27.289
1 minus 1 over k,
that's 1 minus one-third.

195
00:13:27.289 --> 00:13:28.146
That's two-thirds.

196
00:13:28.146 --> 00:13:31.360
2 times two-thirds,
this is a four thirds approximation.

197
00:13:32.700 --> 00:13:36.400
So actually, the knowledge
assessed earlier was not right.

198
00:13:36.400 --> 00:13:38.670
Actually, by doing this
more careful analysis,

199
00:13:38.670 --> 00:13:44.460
we were able to prove that the algorithm
is a four thirds approximation for k = 3.

200
00:13:44.460 --> 00:13:49.600
And a 2 times 1 minus 1 over k
approximation for k general.

201
00:13:50.710 --> 00:13:54.810
Now what we're going to do
is we're gonna try to design

202
00:13:54.810 --> 00:13:59.461
a better algorithm relying on
an interesting LP relaxation.