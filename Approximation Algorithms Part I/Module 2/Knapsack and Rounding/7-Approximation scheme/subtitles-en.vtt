WEBVTT

1
00:00:00.025 --> 00:00:04.666
[SOUND] We have seem
an approximation algorithm for

2
00:00:04.666 --> 00:00:09.306
the knapsack problem that
gives us a solution that

3
00:00:09.306 --> 00:00:13.073
is quite close to the optimal solution.

4
00:00:13.073 --> 00:00:13.860
Now what?

5
00:00:14.950 --> 00:00:17.850
Now what we want is
an approximation scheme.

6
00:00:19.120 --> 00:00:22.340
That is, we want to do better than this.

7
00:00:22.340 --> 00:00:23.200
How could we do better?

8
00:00:24.990 --> 00:00:27.750
Here's one way to get better.

9
00:00:27.750 --> 00:00:32.545
Instead of defining N as 1000n,

10
00:00:32.545 --> 00:00:37.505
we will use this as a larger value of N.

11
00:00:37.505 --> 00:00:38.800
Capital N, 1000n.

12
00:00:39.880 --> 00:00:42.270
And then the rest is the same.

13
00:00:42.270 --> 00:00:46.200
We scale as before, we round as before,

14
00:00:46.200 --> 00:00:51.100
we apply the program, as before, and
we output the corresponding items.

15
00:00:51.100 --> 00:00:57.140
The only difference with the previous
algorithm is that capital N is 1000n,

16
00:00:57.140 --> 00:00:58.010
instead of 100n.

17
00:00:59.820 --> 00:01:00.680
What does this change?

18
00:01:02.980 --> 00:01:08.726
What changes is that, this gives
a solution to knapsack that is now,

19
00:01:08.726 --> 00:01:15.390
instead of being a 99% approximation,
it's a 99.9% approximation.

20
00:01:15.390 --> 00:01:18.980
Very close to optimum, and
the runtime is still polynomial.

21
00:01:20.460 --> 00:01:21.440
We could keep going.

22
00:01:22.640 --> 00:01:28.460
We could keep going that is, we could
get an algorithm, one for each epsilon

23
00:01:28.460 --> 00:01:33.890
that has a running time polynomial input
and whose value is very close to optimum.

24
00:01:35.500 --> 00:01:41.530
The value would be close to optimum
with error at most epsilon OPT.

25
00:01:42.620 --> 00:01:45.350
So what this gives us is
an approximation scheme.

26
00:01:46.660 --> 00:01:50.020
Knapsack has a an approximation scheme.

27
00:01:50.020 --> 00:01:52.669
We can get to a 99% of optimal.

28
00:01:52.669 --> 00:01:54.180
99.9% of optimal.

29
00:01:54.180 --> 00:01:57.080
1- epsilon x optimal.

30
00:01:59.210 --> 00:02:00.350
How epsilon comes in?

31
00:02:01.840 --> 00:02:03.560
The smaller epsilon is.

32
00:02:03.560 --> 00:02:05.510
See how small it is.

33
00:02:05.510 --> 00:02:07.380
I can barely see it.

34
00:02:07.380 --> 00:02:10.640
The closer we are to the optimal solution.

35
00:02:10.640 --> 00:02:13.460
So why not let epsilon go to 0 and

36
00:02:13.460 --> 00:02:17.000
then we will find the exact
optimum in polynomial time?

37
00:02:18.180 --> 00:02:21.130
Well this we cannot quite go that far.

38
00:02:21.130 --> 00:02:21.630
Why?

39
00:02:22.810 --> 00:02:26.830
Because the problem is NP-hard,
so we know we can not do this.

40
00:02:27.860 --> 00:02:32.380
And because, the runtime
increases as epsilon goes to 0.

41
00:02:32.380 --> 00:02:34.450
The runtime is linear in capital N.

42
00:02:35.650 --> 00:02:38.660
When capital n is n/epsilon,

43
00:02:38.660 --> 00:02:44.370
then what we can see is that as epsilon
goes to 0 the runtime goes to infinity.

44
00:02:44.370 --> 00:02:48.130
And so, that is why you cannot
solve the problem exactly

45
00:02:48.130 --> 00:02:49.890
using the approximation scheme.

46
00:02:51.640 --> 00:02:55.520
So what is the method that
we have developed for

47
00:02:55.520 --> 00:02:59.650
the approximation algorithm for the.

48
00:02:59.650 --> 00:03:03.840
We have shown how we can
first simply find the input.

49
00:03:03.840 --> 00:03:09.320
To reduce a complicated input
to an easy special case and

50
00:03:09.320 --> 00:03:15.760
then designed an algorithm that worked for
such simple inputs.

51
00:03:15.760 --> 00:03:23.400
The key to this is to simplify the input
without losing much to the optimal value.

52
00:03:25.220 --> 00:03:29.220
So, with this technique we have
solved the knapsack problem.

53
00:03:29.220 --> 00:03:34.000
It has been the occasion for
us to study rounding.

54
00:03:34.000 --> 00:03:38.650
Rounding the input as opposed to
rounding to get the output as we

55
00:03:38.650 --> 00:03:41.579
saw when we were studying the.

56
00:03:41.579 --> 00:03:44.240
Notice that of all

57
00:03:44.240 --> 00:03:48.800
approximation algorithms this
is perhaps the most practical.

58
00:03:48.800 --> 00:03:54.270
The next half hour is a basic and
this algorithm is an algorithm that is

59
00:03:54.270 --> 00:03:58.980
easy to implement and
quite fast in practice.

60
00:03:58.980 --> 00:04:05.250
Observe that the runtime is not only
polynomial in terms of the input.

61
00:04:05.250 --> 00:04:08.820
But also,
polynomial in terms of 1 over epsilon.

62
00:04:10.100 --> 00:04:14.290
As epsilon goes to 0, of course
the runtime goes to infinity, but

63
00:04:14.290 --> 00:04:17.520
only at polynomial speed.

64
00:04:17.520 --> 00:04:20.720
At the polynomial rate in 1 over epsilon.

65
00:04:20.720 --> 00:04:23.740
And so
such an approximation scheme is called

66
00:04:25.180 --> 00:04:26.960
polynomial time approximations scheme.

67
00:04:28.200 --> 00:04:32.020
The knapsack problem has a fully
polynomial time approximation scheme.

68
00:04:33.030 --> 00:04:35.530
This is the fact you can
remember from this chapter.

69
00:04:35.530 --> 00:04:40.380
A technique for designing
approximation algorithms is rounding

70
00:04:40.380 --> 00:04:45.580
the input to simplify the input
to reduce it to a special case.

71
00:04:47.700 --> 00:04:52.860
Next time we will see some other
approximation schemes using more

72
00:04:52.860 --> 00:04:55.450
complicated rounding techniques.