WEBVTT

1
00:00:00.000 --> 00:00:04.183
[MUSIC]

2
00:00:04.183 --> 00:00:07.970
Welcome back to the course
on Approximation algorithms.

3
00:00:07.970 --> 00:00:10.880
Let us continue our study of
the vertex cover program.

4
00:00:12.060 --> 00:00:15.850
We have designed a linear programming
relaxation for vertex cover.

5
00:00:15.850 --> 00:00:19.580
Now let us see how we can use
it to design an algorithm.

6
00:00:21.760 --> 00:00:26.360
As a reminder,
here is the linear programming relaxation.

7
00:00:26.360 --> 00:00:31.561
For every vertex in the graph there is
a variable whose value is between 0 and 1.

8
00:00:32.610 --> 00:00:34.450
For every edge in the graph,

9
00:00:34.450 --> 00:00:39.620
the sum of the two values of the two
variables must be at least 1.

10
00:00:39.620 --> 00:00:47.100
And the objective is to minimize
the weighted sum of the variables.

11
00:00:47.100 --> 00:00:49.200
What can we do with this linear program?

12
00:00:51.220 --> 00:00:53.420
First, of course we solve it.

13
00:00:55.330 --> 00:00:59.020
Solving it will give us time, values for

14
00:00:59.020 --> 00:01:03.880
each of the variables,
the optimal values xu star for vertex u,

15
00:01:03.880 --> 00:01:07.840
xv star for vertex v, for
every vertex in the graph.

16
00:01:09.380 --> 00:01:12.530
These values satisfy all the constraints.

17
00:01:12.530 --> 00:01:14.650
And the objective is minimized.

18
00:01:16.090 --> 00:01:18.170
Now what do we do with this?

19
00:01:19.780 --> 00:01:22.450
We need from this to
deduce a vertex cover.

20
00:01:24.190 --> 00:01:30.380
For that we need to decide for each vertex
whether or not we put it in the cover.

21
00:01:30.380 --> 00:01:34.900
So what do we do with these values
that are real numbers between 0 and 1?

22
00:01:34.900 --> 00:01:40.950
If a value is .7 it's like saying
a vertex is 70% in the vertex cover.

23
00:01:40.950 --> 00:01:45.080
So what do we do to decide whether to
put the vertex in the cover or not?

24
00:01:45.080 --> 00:01:47.790
We simply round to the nearest integer.

25
00:01:48.880 --> 00:01:54.530
So if the value associated to vertex
u is at least 0.5, we round to 1.

26
00:01:54.530 --> 00:01:58.710
If it's strictly less than 0.5,
we round down to 0.

27
00:01:58.710 --> 00:02:05.380
This defines an integer value z sub u for
each graph vertex.

28
00:02:05.380 --> 00:02:10.720
Now we're back to integers, therefore
this is an encoding of a set of vertices

29
00:02:10.720 --> 00:02:14.900
that will be our output,
so that's the algorithm.

30
00:02:17.490 --> 00:02:22.200
So here you can see the global
view of the algorithm.

31
00:02:22.200 --> 00:02:24.790
Step 1, you saw the LP.

32
00:02:24.790 --> 00:02:27.430
Step 2, you round the LP solution.

33
00:02:28.540 --> 00:02:32.678
And finally, you output the set
of all vertices, such that,

34
00:02:32.678 --> 00:02:34.840
z sub u is equal to 1.

35
00:02:34.840 --> 00:02:37.570
The first thing we can note is that

36
00:02:37.570 --> 00:02:41.360
if we look at this algorithm
the runtime is polynomial.

37
00:02:41.360 --> 00:02:46.030
Solving the linear program can be done in
polynomial time, that's our black box.

38
00:02:46.030 --> 00:02:49.960
Running the solution takes linear time and
then we just get the output.

39
00:02:51.040 --> 00:02:58.810
So we do have a polynomial time algorithm,
but does it solve vertex cover?

40
00:02:58.810 --> 00:03:01.560
Does it give a correct vertex cover?

41
00:03:03.360 --> 00:03:05.600
Does it cover all edges?

42
00:03:05.600 --> 00:03:10.310
It's a set of vertices in order for
the algorithm to be correct,

43
00:03:10.310 --> 00:03:16.130
the set output must be a cover
of all the edges by vertices.

44
00:03:16.130 --> 00:03:21.900
So, let us argue that the output
set of vertices is a vertex cover.

45
00:03:21.900 --> 00:03:24.050
That it covers all edges of the graph.

46
00:03:26.330 --> 00:03:28.230
Does the output cover all edges?

47
00:03:28.230 --> 00:03:30.000
Let's focus on one of them.

48
00:03:31.330 --> 00:03:35.650
Let's say that uv is an edge in a graph,
uv.

49
00:03:35.650 --> 00:03:36.720
What can we say about uv?

50
00:03:38.140 --> 00:03:41.550
We know that the linear program
has an associated constraint, and

51
00:03:41.550 --> 00:03:45.710
that this constraint is
satisfied by the lp solution.

52
00:03:46.810 --> 00:03:52.180
So what we know xu star plus
xu star is at least one.

53
00:03:52.180 --> 00:03:54.550
This is a fact from the algorithm.

54
00:03:56.910 --> 00:03:58.940
What can we infer from this?

55
00:04:01.340 --> 00:04:04.114
For example xu star could be 0.7.

56
00:04:04.114 --> 00:04:05.936
xv star could be 0.3.

57
00:04:05.936 --> 00:04:09.586
The idea, small idea a very,

58
00:04:09.586 --> 00:04:14.696
very small idea is if
xu star + xv star is at

59
00:04:14.696 --> 00:04:20.098
least 1 then at least
one of these two values

60
00:04:20.098 --> 00:04:25.074
must be greater than or equal to 0.5.

61
00:04:27.660 --> 00:04:32.860
Of these two values, at least one
must be greater than or equal to 0.5.

62
00:04:32.860 --> 00:04:34.520
How does that help?

63
00:04:37.100 --> 00:04:41.870
Let's look at the definition of the z
sub u, at our choice of integers,

64
00:04:41.870 --> 00:04:42.420
our rounding.

65
00:04:43.730 --> 00:04:48.490
z sub u is 1,
as soon as at least one of the variables,

66
00:04:48.490 --> 00:04:51.950
as soon as variable xu
star is at least 0.5.

67
00:04:51.950 --> 00:04:57.910
So, in the example,
xu star is 0.7, xv star is 0.3.

68
00:04:57.910 --> 00:05:04.660
This means that zu will be 1, 0.7 is
rounded to 1, 0.3 is rounded down to zero.

69
00:05:05.780 --> 00:05:11.680
This means that the output set of
vertices will contain the vertex u and

70
00:05:11.680 --> 00:05:15.430
therefore, that edge uv will be covered.

71
00:05:15.430 --> 00:05:17.030
This is general.

72
00:05:17.030 --> 00:05:23.310
Since at least one of the two variable
xu star, xv star is greater than 0.5,

73
00:05:23.310 --> 00:05:29.210
at least one of the two values zu,
zv will be equal to 1.

74
00:05:29.210 --> 00:05:32.430
And so
at least one of the two vertices u or

75
00:05:32.430 --> 00:05:37.800
v will be put in the cover and
so the output will cover at uv.

76
00:05:39.040 --> 00:05:43.830
This is true for every edge in the graph
so the output covers all edges.

77
00:05:43.830 --> 00:05:47.650
So it is a vertex cover and
so our algorithm is correct.

78
00:05:49.650 --> 00:05:54.428
In this part we have proposed
an approximation algorithm for the vertex

79
00:05:54.428 --> 00:05:58.300
cover problem based on the solving
a linear programming relaxation and

80
00:05:58.300 --> 00:06:01.440
rounding and
we have proved that it is correct.

81
00:06:01.440 --> 00:06:04.470
That the output really is a vertex cover.

82
00:06:04.470 --> 00:06:07.500
Now, what remains is
to see how good it is,

83
00:06:07.500 --> 00:06:10.620
what is the quality of
the output vertex cover.